<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:m="http://www.w3.org/1998/Math/MathML" version="1.0"><xsl:output method="text" indent="no" encoding="UTF-8"/><xsl:template match="m:mi|m:mn|m:mo|m:mtext|m:ms"><xsl:call-template name="CommonTokenAtr"/></xsl:template><xsl:template match="m:mglyph"><xsl:text>\textcolor{red}{</xsl:text><xsl:value-of select="@alt"/><xsl:text>}</xsl:text></xsl:template><xsl:template name="mi"><xsl:choose><xsl:when test="string-length(normalize-space(.))&gt;1 and not(@mathvariant)"><xsl:text>\mathrm{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:apply-templates/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="mn"><xsl:choose><xsl:when test="string(number(.))='NaN' and not(@mathvariant)"><xsl:text>\mathrm{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:apply-templates/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="mo"><xsl:if test="translate(normalize-space(.),'()[]}|','{{{{{{')='{'"><xsl:choose><xsl:when test="not(@stretchy='false') and count(preceding-sibling::m:mo[translate(normalize-space(.),'()[]}|','{{{{{{')='{'])mod 2=0 and following-sibling::m:mo[1][not(@stretchy='false')][translate(normalize-space(.),'()[]}|','{{{{{{')='{']"><xsl:text>\left</xsl:text></xsl:when><xsl:when test="not(@stretchy='false') and count(preceding-sibling::m:mo[translate(normalize-space(.),'()[]}|','{{{{{{')='{'])mod 2=1 and preceding-sibling::m:mo[1][not(@stretchy='false')][translate(normalize-space(.),'()[]}|','{{{{{{')='{']"><xsl:text>\right</xsl:text></xsl:when></xsl:choose></xsl:if><xsl:apply-templates/></xsl:template><xsl:template name="mtext"><xsl:variable name="content"><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="normalize-space(.)"/></xsl:call-template></xsl:variable><xsl:text>\text{</xsl:text><xsl:value-of select="$content"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:mspace"><xsl:text>\phantom{\rule</xsl:text><xsl:if test="@depth"><xsl:text>[-</xsl:text><xsl:value-of select="@depth"/><xsl:text>]</xsl:text></xsl:if><xsl:text>{</xsl:text><xsl:if test="not(@width)"><xsl:text>0ex</xsl:text></xsl:if><xsl:value-of select="@width"/><xsl:text>}{</xsl:text><xsl:if test="not(@height)"><xsl:text>0ex</xsl:text></xsl:if><xsl:value-of select="@height"/><xsl:text>}}</xsl:text></xsl:template><xsl:template name="ms"><xsl:choose><xsl:when test="@lquote"><xsl:value-of select="@lquote"/></xsl:when><xsl:otherwise><xsl:text>''</xsl:text></xsl:otherwise></xsl:choose><xsl:apply-templates/><xsl:choose><xsl:when test="@rquote"><xsl:value-of select="@rquote"/></xsl:when><xsl:otherwise><xsl:text>''</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CommonTokenAtr"><xsl:if test="@mathbackground"><xsl:text>\colorbox[rgb]{</xsl:text><xsl:call-template name="color"><xsl:with-param name="color" select="@mathbackground"/></xsl:call-template><xsl:text>}{$</xsl:text></xsl:if><xsl:if test="@color[not(@mathcolor)] or @mathcolor"><xsl:text>\textcolor[rgb]{</xsl:text><xsl:call-template name="color"><xsl:with-param name="color" select="@color|@mathcolor"/></xsl:call-template><xsl:text>}{</xsl:text></xsl:if><xsl:if test="@mathvariant"><xsl:choose><xsl:when test="@mathvariant='normal'"><xsl:text>\mathrm{</xsl:text></xsl:when><xsl:when test="@mathvariant='bold'"><xsl:text>\mathbf{</xsl:text></xsl:when><xsl:when test="@mathvariant='italic'"><xsl:text>\mathit{</xsl:text></xsl:when><xsl:when test="@mathvariant='bold-italic'"><xsl:text>\mathit{</xsl:text><xsl:message>The value bold-italic for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='double-struck'"><xsl:text>\mathbb{</xsl:text></xsl:when><xsl:when test="@mathvariant='bold-fraktur'"><xsl:text>\mathfrak{</xsl:text><xsl:message>The value bold-fraktur for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='script'"><xsl:text>\mathcal{</xsl:text></xsl:when><xsl:when test="@mathvariant='bold-script'"><xsl:text>\mathcal{</xsl:text><xsl:message>The value bold-script for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='fraktur'"><xsl:text>\mathfrak{</xsl:text></xsl:when><xsl:when test="@mathvariant='sans-serif'"><xsl:text>\mathsf{</xsl:text></xsl:when><xsl:when test="@mathvariant='bold-sans-serif'"><xsl:text>\mathsf{</xsl:text><xsl:message>The value bold-sans-serif for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='sans-serif-italic'"><xsl:text>\mathsf{</xsl:text><xsl:message>The value sans-serif-italic for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='sans-serif-bold-italic'"><xsl:text>\mathsf{</xsl:text><xsl:message>The value sans-serif-bold-italic for mathvariant is not supported</xsl:message></xsl:when><xsl:when test="@mathvariant='monospace'"><xsl:text>\mathtt{</xsl:text></xsl:when><xsl:otherwise><xsl:text>{</xsl:text><xsl:message>Error at mathvariant attribute</xsl:message></xsl:otherwise></xsl:choose></xsl:if><xsl:call-template name="selectTemplate"/><xsl:if test="@mathvariant"><xsl:text>}</xsl:text></xsl:if><xsl:if test="@color or @mathcolor"><xsl:text>}</xsl:text></xsl:if><xsl:if test="@mathbackground"><xsl:text>$}</xsl:text></xsl:if></xsl:template><xsl:template name="selectTemplate"><xsl:choose><xsl:when test="local-name(.)='mi'"><xsl:call-template name="mi"/></xsl:when><xsl:when test="local-name(.)='mn'"><xsl:call-template name="mn"/></xsl:when><xsl:when test="local-name(.)='mo'"><xsl:call-template name="mo"/></xsl:when><xsl:when test="local-name(.)='mtext'"><xsl:call-template name="mtext"/></xsl:when><xsl:when test="local-name(.)='ms'"><xsl:call-template name="ms"/></xsl:when></xsl:choose></xsl:template><xsl:template name="color"><xsl:param name="color"/><xsl:variable name="colora" select="translate($color,'ABCDEFGHIJKLMNOPQRSTUVWXYZ','abcdefghijklmnopqrstuvwxyz')"/><xsl:choose><xsl:when test="starts-with($colora,'#') and string-length($colora)=7"><xsl:value-of select="$color"/></xsl:when><xsl:when test="$colora='aqua'"><xsl:text>#00FFFF</xsl:text></xsl:when><xsl:when test="$colora='cyan'"><xsl:text>#00FFFF</xsl:text></xsl:when><xsl:when test="$colora='black'"><xsl:text>#000000</xsl:text></xsl:when><xsl:when test="$colora='blue'"><xsl:text>#0000FF</xsl:text></xsl:when><xsl:when test="$colora='fuchsia'"><xsl:text>#FF00FF</xsl:text></xsl:when><xsl:when test="$colora='magenta'"><xsl:text>#FF00FF</xsl:text></xsl:when><xsl:when test="$colora='gray'"><xsl:text>#808080</xsl:text></xsl:when><xsl:when test="$colora='green'"><xsl:text>#008000</xsl:text></xsl:when><xsl:when test="$colora='lime'"><xsl:text>#00FF00</xsl:text></xsl:when><xsl:when test="$colora='maroon'"><xsl:text>#800000</xsl:text></xsl:when><xsl:when test="$colora='navy'"><xsl:text>#000080</xsl:text></xsl:when><xsl:when test="$colora='olive'"><xsl:text>#808000</xsl:text></xsl:when><xsl:when test="$colora='purple'"><xsl:text>#800080</xsl:text></xsl:when><xsl:when test="$colora='red'"><xsl:text>#FF0000</xsl:text></xsl:when><xsl:when test="$colora='silver'"><xsl:text>#C0C0C0</xsl:text></xsl:when><xsl:when test="$colora='teal'"><xsl:text>#008080</xsl:text></xsl:when><xsl:when test="$colora='white'"><xsl:text>#FFFFFF</xsl:text></xsl:when><xsl:when test="$colora='yellow'"><xsl:text>#FFFF00</xsl:text></xsl:when><xsl:otherwise><xsl:message>Exception at color template</xsl:message></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:*/text()"><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="normalize-space()"/></xsl:call-template></xsl:template><xsl:template match="m:mfrac"><xsl:choose><xsl:when test="@linethickness"><xsl:text>\genfrac{}{}{</xsl:text><xsl:choose><xsl:when test="number(@linethickness)"><xsl:value-of select="@linethickness div 10"/><xsl:text>ex</xsl:text></xsl:when><xsl:when test="@linethickness='0'"><xsl:text>0ex</xsl:text></xsl:when><xsl:when test="@linethickness='thin'"><xsl:text>.05ex</xsl:text></xsl:when><xsl:when test="@linethickness='medium'"/><xsl:when test="@linethickness='thick'"><xsl:text>.2ex</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="@linethickness"/></xsl:otherwise></xsl:choose><xsl:text>}{}{</xsl:text></xsl:when><xsl:otherwise><xsl:text>\frac{</xsl:text></xsl:otherwise></xsl:choose><xsl:if test="@numalign='right'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:apply-templates select="./*[1]"/><xsl:if test="@numalign='left'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:text>}{</xsl:text><xsl:if test="@denomalign='right'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:apply-templates select="./*[2]"/><xsl:if test="@denomalign='left'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:mfrac[@bevelled='true']"><xsl:text>\raisebox{1ex}{$</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>$}\!\left/ \!\raisebox{-1ex}{$</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>$}\right.</xsl:text></xsl:template><xsl:template match="m:mroot"><xsl:choose><xsl:when test="count(./*)=2"><xsl:text>\sqrt[</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>]{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:message>exception 25:</xsl:message><xsl:text>\text{exception 25:}</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:msqrt"><xsl:text>\sqrt{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:mfenced"><xsl:choose><xsl:when test="@open"><xsl:if test="translate(@open,'{}[]()|','{{{{{{{')='{'"><xsl:text>\left</xsl:text></xsl:if><xsl:if test="@open='{' or @open='}'"><xsl:text>\</xsl:text></xsl:if><xsl:if test="translate(@open,'{}[]()|','{{{{{{{')!='{' and (translate(@close,'{}[]()|','{{{{{{{')='{' or not(@close))"><xsl:text>\left.</xsl:text></xsl:if><xsl:value-of select="@open"/></xsl:when><xsl:otherwise><xsl:text>\left(</xsl:text></xsl:otherwise></xsl:choose><xsl:variable name="sep"><xsl:choose><xsl:when test="@separators"><xsl:value-of select="translate(@separators,' ','')"/></xsl:when><xsl:otherwise>,</xsl:otherwise></xsl:choose></xsl:variable><xsl:for-each select="./*"><xsl:apply-templates select="."/><xsl:if test="not(position()=last())"><xsl:choose><xsl:when test="position()&gt;string-length($sep)"><xsl:value-of select="substring($sep,string-length($sep))"/></xsl:when><xsl:otherwise><xsl:value-of select="substring($sep,position(),1)"/></xsl:otherwise></xsl:choose></xsl:if></xsl:for-each><xsl:choose><xsl:when test="@close"><xsl:if test="translate(@close,'{}[]()|','{{{{{{{')='{'"><xsl:text>\right</xsl:text></xsl:if><xsl:if test="@close='{' or @close='}'"><xsl:text>\</xsl:text></xsl:if><xsl:if test="translate(@close,'{}[]()|','{{{{{{{')!='{' and (translate(@open,'{}[]()|','{{{{{{{')='{' or not(@open))"><xsl:text>\right.</xsl:text></xsl:if><xsl:value-of select="@close"/></xsl:when><xsl:otherwise><xsl:text>\right)</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:mphantom"><xsl:text>\phantom{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:menclose"><xsl:choose><xsl:when test="@notation = 'actuarial'"><xsl:text>\overline{</xsl:text><xsl:apply-templates/><xsl:text>\hspace{.2em}|}</xsl:text></xsl:when><xsl:when test="@notation = 'radical'"><xsl:text>\sqrt{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:text>\overline{)</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:mrow"><xsl:apply-templates/></xsl:template><xsl:template match="m:mstyle"><xsl:if test="@displaystyle='true'"><xsl:text>{\displaystyle </xsl:text></xsl:if><xsl:if test="@scriptlevel and not(@displaystyle='true')"><xsl:text>{</xsl:text><xsl:choose><xsl:when test="@scriptlevel=0"><xsl:text>\textstyle </xsl:text></xsl:when><xsl:when test="@scriptlevel=1"><xsl:text>\scriptstyle </xsl:text></xsl:when><xsl:otherwise><xsl:text>\scriptscriptstyle </xsl:text></xsl:otherwise></xsl:choose></xsl:if><xsl:if test="@background"><xsl:text>\colorbox[rgb]{</xsl:text><xsl:call-template name="color"><xsl:with-param name="color" select="@background"/></xsl:call-template><xsl:text>}{$</xsl:text></xsl:if><xsl:if test="@color[not(@mathcolor)] or @mathcolor"><xsl:text>\textcolor[rgb]{</xsl:text><xsl:call-template name="color"><xsl:with-param name="color" select="@color|@mathcolor"/></xsl:call-template><xsl:text>}{</xsl:text></xsl:if><xsl:apply-templates/><xsl:if test="@color[not(@mathcolor)] or @mathcolor"><xsl:text>}</xsl:text></xsl:if><xsl:if test="@background"><xsl:text>$}</xsl:text></xsl:if><xsl:if test="@scriptlevel and not(@displaystyle='true')"><xsl:text>}</xsl:text></xsl:if><xsl:if test="@displaystyle='true'"><xsl:text>}</xsl:text></xsl:if></xsl:template><xsl:template match="m:merror"><xsl:apply-templates/></xsl:template><xsl:template match="m:munderover"><xsl:variable name="base" select="translate(./*[1],' ','')"/><xsl:variable name="under" select="translate(./*[2],' ','')"/><xsl:variable name="over" select="translate(./*[3],' ','')"/><xsl:choose><xsl:when test="$over='&#175;'"><xsl:text>\overline{</xsl:text><xsl:call-template name="munder"><xsl:with-param name="base" select="$base"/><xsl:with-param name="under" select="$under"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#65079;'"><xsl:text>\overbrace{</xsl:text><xsl:call-template name="munder"><xsl:with-param name="base" select="$base"/><xsl:with-param name="under" select="$under"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8592;'"><xsl:text>\overleftarrow{</xsl:text><xsl:call-template name="munder"><xsl:with-param name="base" select="$base"/><xsl:with-param name="under" select="$under"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8594;'"><xsl:text>\overrightarrow{</xsl:text><xsl:call-template name="munder"><xsl:with-param name="base" select="$base"/><xsl:with-param name="under" select="$under"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8596;'"><xsl:text>\overleftrightarrow{</xsl:text><xsl:call-template name="munder"><xsl:with-param name="base" select="$base"/><xsl:with-param name="under" select="$under"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#818;'"><xsl:text>\underline{</xsl:text><xsl:call-template name="mover"><xsl:with-param name="base" select="$base"/><xsl:with-param name="over" select="$over"/><xsl:with-param name="pos_over" select="3"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#65080;'"><xsl:text>\underbrace{</xsl:text><xsl:call-template name="mover"><xsl:with-param name="base" select="$base"/><xsl:with-param name="over" select="$over"/><xsl:with-param name="pos_over" select="3"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8592;'"><xsl:text>\underleftarrow{</xsl:text><xsl:call-template name="mover"><xsl:with-param name="base" select="$base"/><xsl:with-param name="over" select="$over"/><xsl:with-param name="pos_over" select="3"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8594;'"><xsl:text>\underrightarrow{</xsl:text><xsl:call-template name="mover"><xsl:with-param name="base" select="$base"/><xsl:with-param name="over" select="$over"/><xsl:with-param name="pos_over" select="3"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8596;'"><xsl:text>\underleftrightarrow{</xsl:text><xsl:call-template name="mover"><xsl:with-param name="base" select="$base"/><xsl:with-param name="over" select="$over"/><xsl:with-param name="pos_over" select="3"/></xsl:call-template><xsl:text>}</xsl:text></xsl:when><xsl:when test="translate($base,'&#8719;&#8720;&#8898;&#8899;&#8852;',       '&#8721;&#8721;&#8721;&#8721;&#8721;')='&#8721;'"><xsl:apply-templates select="./*[1]"/><xsl:text>_{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}^{</xsl:text><xsl:apply-templates select="./*[3]"/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:text>\underset{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}{\overset{</xsl:text><xsl:apply-templates select="./*[3]"/><xsl:text>}{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}}</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:mover"><xsl:call-template name="mover"><xsl:with-param name="base" select="translate(./*[1],' ','')"/><xsl:with-param name="over" select="translate(./*[2],' ','')"/></xsl:call-template></xsl:template><xsl:template match="m:munder"><xsl:call-template name="munder"><xsl:with-param name="base" select="translate(./*[1],' ','')"/><xsl:with-param name="under" select="translate(./*[2],' ','')"/></xsl:call-template></xsl:template><xsl:template name="mover"><xsl:param name="base"/><xsl:param name="over"/><xsl:param name="pos_over" select="2"/><xsl:choose><xsl:when test="$over='&#175;'"><xsl:text>\overline{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#65079;'"><xsl:text>\overbrace{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8592;'"><xsl:text>\overleftarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8594;'"><xsl:text>\overrightarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#8596;'"><xsl:text>\overleftrightarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#732;'"><xsl:text>\tilde{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#10003;'"><xsl:text>\check{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#729;'"><xsl:text>\dot{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#168;'"><xsl:text>\ddot{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$over='&#770;' or $over='^'"><xsl:choose><xsl:when test="@accent='true'"><xsl:text>\widehat{</xsl:text></xsl:when><xsl:otherwise><xsl:text>\hat{</xsl:text></xsl:otherwise></xsl:choose><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="translate($base,'&#8719;&#8720;&#8898;&#8899;&#8852;',       '&#8721;&#8721;&#8721;&#8721;&#8721;')='&#8721;'"><xsl:apply-templates select="./*[1]"/><xsl:text>^{</xsl:text><xsl:apply-templates select="./*[$pos_over]"/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:text>\stackrel{</xsl:text><xsl:apply-templates select="./*[$pos_over]"/><xsl:text>}{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="munder"><xsl:param name="base"/><xsl:param name="under"/><xsl:choose><xsl:when test="$under='&#818;'"><xsl:text>\underline{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#65080;'"><xsl:text>\underbrace{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8592;'"><xsl:text>\underleftarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8594;'"><xsl:text>\underrightarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="$under='&#8596;'"><xsl:text>\underleftrightarrow{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:when><xsl:when test="translate($base,'&#8719;&#8720;&#8898;&#8899;&#8852;',       '&#8721;&#8721;&#8721;&#8721;&#8721;')='&#8721;'"><xsl:apply-templates select="./*[1]"/><xsl:text>_{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:text>\underset{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}{</xsl:text><xsl:apply-templates select="./*[1]"/><xsl:text>}</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:msubsup"><xsl:apply-templates select="./*[1]"/><xsl:text>_{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}^{</xsl:text><xsl:apply-templates select="./*[3]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:msup"><xsl:apply-templates select="./*[1]"/><xsl:text>^{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:msub"><xsl:apply-templates select="./*[1]"/><xsl:text>_{</xsl:text><xsl:apply-templates select="./*[2]"/><xsl:text>}</xsl:text></xsl:template><xsl:template mode="mprescripts" match="m:mmultiscripts"><xsl:for-each select="m:mprescripts/following-sibling::*"><xsl:if test="position() mod 2 and local-name(.)!='none'"><xsl:text>{}_{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if><xsl:if test="not(position() mod 2) and local-name(.)!='none'"><xsl:text>{}^{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if></xsl:for-each><xsl:apply-templates select="./*[1]"/><xsl:for-each select="m:mprescripts/preceding-sibling::*[position()!=last()]"><xsl:if test="position()&gt;2 and local-name(.)!='none'"><xsl:text>{}</xsl:text></xsl:if><xsl:if test="position() mod 2 and local-name(.)!='none'"><xsl:text>_{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if><xsl:if test="not(position() mod 2) and local-name(.)!='none'"><xsl:text>^{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if></xsl:for-each></xsl:template><xsl:template match="m:mmultiscripts"><xsl:choose><xsl:when test="m:mprescripts"><xsl:apply-templates mode="mprescripts" select="."/></xsl:when><xsl:otherwise><xsl:apply-templates select="./*[1]"/><xsl:for-each select="*[position()&gt;1]"><xsl:if test="position()&gt;2 and local-name(.)!='none'"><xsl:text>{}</xsl:text></xsl:if><xsl:if test="position() mod 2 and local-name(.)!='none'"><xsl:text>_{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if><xsl:if test="not(position() mod 2) and local-name(.)!='none'"><xsl:text>^{</xsl:text><xsl:apply-templates select="."/><xsl:text>}</xsl:text></xsl:if></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:mtd[@columnspan]"><xsl:text>\multicolumn{</xsl:text><xsl:value-of select="@columnspan"/><xsl:text>}{c}{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text><xsl:if test="count(following-sibling::*)&gt;0"><xsl:text xml:space="preserve">&amp; </xsl:text></xsl:if></xsl:template><xsl:template match="m:mtd"><xsl:if test="@columnalign='right' or @columnalign='center'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:apply-templates/><xsl:if test="@columnalign='left' or @columnalign='center'"><xsl:text>\hfill </xsl:text></xsl:if><xsl:if test="count(following-sibling::*)&gt;0"><xsl:text xml:space="preserve">&amp; </xsl:text></xsl:if></xsl:template><xsl:template match="m:mtr"><xsl:apply-templates/><xsl:if test="count(following-sibling::*)&gt;0"><xsl:text>\\ </xsl:text></xsl:if></xsl:template><xsl:template match="m:mtable"><xsl:text>\begin{array}{</xsl:text><xsl:if test="@frame='solid'"><xsl:text>|</xsl:text></xsl:if><xsl:variable name="numbercols" select="count(./m:mtr[1]/m:mtd[not(@columnspan)])+sum(./m:mtr[1]/m:mtd/@columnspan)"/><xsl:choose><xsl:when test="@columnalign"><xsl:variable name="colalign"><xsl:call-template name="colalign"><xsl:with-param name="colalign" select="@columnalign"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="string-length($colalign) &gt; $numbercols"><xsl:value-of select="substring($colalign,1,$numbercols)"/></xsl:when><xsl:when test="string-length($colalign) &lt; $numbercols"><xsl:value-of select="$colalign"/><xsl:call-template name="generate-string"><xsl:with-param name="text" select="substring($colalign,string-length($colalign))"/><xsl:with-param name="count" select="$numbercols - string-length($colalign)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$colalign"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:call-template name="generate-string"><xsl:with-param name="text" select="'c'"/><xsl:with-param name="count" select="$numbercols"/></xsl:call-template></xsl:otherwise></xsl:choose><xsl:if test="@frame='solid'"><xsl:text>|</xsl:text></xsl:if><xsl:text>}</xsl:text><xsl:if test="@frame='solid'"><xsl:text>\hline </xsl:text></xsl:if><xsl:apply-templates/><xsl:if test="@frame='solid'"><xsl:text>\\ \hline</xsl:text></xsl:if><xsl:text>\end{array}</xsl:text></xsl:template><xsl:template name="colalign"><xsl:param name="colalign"/><xsl:choose><xsl:when test="contains($colalign,' ')"><xsl:value-of select="substring($colalign,1,1)"/><xsl:call-template name="colalign"><xsl:with-param name="colalign" select="substring-after($colalign,' ')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring($colalign,1,1)"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="generate-string"><xsl:param name="text"/><xsl:param name="count"/><xsl:choose><xsl:when test="string-length($text) = 0 or $count &lt;= 0"/><xsl:otherwise><xsl:value-of select="$text"/><xsl:call-template name="generate-string"><xsl:with-param name="text" select="$text"/><xsl:with-param name="count" select="$count - 1"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="replaceEntities"><xsl:param name="content"/><xsl:if test="string-length($content)&gt;0"><xsl:choose><xsl:when test="starts-with($content,' ')"><xsl:value-of select="'\; '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, ' ')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#603;')"><xsl:value-of select="'\varepsilon '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#603;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#729;')"><xsl:value-of select="'\dot{}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#729;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#163;')"><xsl:value-of select="'\pounds '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#163;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#165;')"><xsl:value-of select="'\yen '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#165;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#167;')"><xsl:value-of select="'\S '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#167;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#169;')"><xsl:value-of select="'\copyright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#169;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#172;')"><xsl:value-of select="'\neg '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#172;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#174;')"><xsl:value-of select="'\circledR '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#174;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#177;')"><xsl:value-of select="'\pm '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#177;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#181;')"><xsl:value-of select="'\mu '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#181;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#182;')"><xsl:value-of select="'\P '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#182;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#197;')"><xsl:value-of select="'\AA '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#197;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#198;')"><xsl:value-of select="'\AE '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#198;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#215;')"><xsl:value-of select="'\times '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#215;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#230;')"><xsl:value-of select="'\ae '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#230;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#913;')"><xsl:value-of select="'{\rm A}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#913;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#914;')"><xsl:value-of select="'{\rm B}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#914;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#915;')"><xsl:value-of select="'\Gamma '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#915;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#916;')"><xsl:value-of select="'\Delta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#916;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#917;')"><xsl:value-of select="'{\rm E}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#917;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#918;')"><xsl:value-of select="'{\rm Z}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#918;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#919;')"><xsl:value-of select="'{\rm H}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#919;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#920;')"><xsl:value-of select="'\Theta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#920;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#921;')"><xsl:value-of select="'{\rm I}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#921;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#922;')"><xsl:value-of select="'{\rm K}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#922;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#923;')"><xsl:value-of select="'\Lambda '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#923;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#924;')"><xsl:value-of select="'{\rm M}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#924;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#925;')"><xsl:value-of select="'{\rm N}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#925;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#926;')"><xsl:value-of select="'\Xi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#926;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#927;')"><xsl:value-of select="'{\rm O}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#927;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#928;')"><xsl:value-of select="'\Pi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#928;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#929;')"><xsl:value-of select="'{\rm P}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#929;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#931;')"><xsl:value-of select="'\Sigma '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#931;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#932;')"><xsl:value-of select="'{\rm T}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#932;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#933;')"><xsl:value-of select="'{\rm Y}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#933;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#934;')"><xsl:value-of select="'\Phi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#934;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#935;')"><xsl:value-of select="'{\rm X}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#935;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#936;')"><xsl:value-of select="'\Psi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#936;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#937;')"><xsl:value-of select="'\Omega '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#937;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#945;')"><xsl:value-of select="'\alpha '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#945;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#946;')"><xsl:value-of select="'\beta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#946;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#947;')"><xsl:value-of select="'\gamma '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#947;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#948;')"><xsl:value-of select="'\delta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#948;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#949;')"><xsl:value-of select="'\epsilon '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#949;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#950;')"><xsl:value-of select="'\zeta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#950;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#951;')"><xsl:value-of select="'\eta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#951;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#952;')"><xsl:value-of select="'\theta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#952;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#953;')"><xsl:value-of select="'\iota '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#953;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#954;')"><xsl:value-of select="'\kappa '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#954;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#955;')"><xsl:value-of select="'\lambda '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#955;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#956;')"><xsl:value-of select="'\mu '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#956;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#957;')"><xsl:value-of select="'\nu '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#957;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#958;')"><xsl:value-of select="'\xi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#958;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#959;')"><xsl:value-of select="'o'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#959;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#960;')"><xsl:value-of select="'\pi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#960;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#961;')"><xsl:value-of select="'\rho '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#961;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#962;')"><xsl:value-of select="'\varsigma '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#962;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#963;')"><xsl:value-of select="'\sigma '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#963;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#964;')"><xsl:value-of select="'\tau '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#964;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#965;')"><xsl:value-of select="'\upsilon '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#965;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#966;')"><xsl:value-of select="'\phi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#966;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#967;')"><xsl:value-of select="'\chi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#967;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#968;')"><xsl:value-of select="'\psi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#968;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#969;')"><xsl:value-of select="'\omega '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#969;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#977;')"><xsl:value-of select="'\vartheta '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#977;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#978;')"><xsl:value-of select="'\Upsilon '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#978;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#981;')"><xsl:value-of select="'\varphi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#981;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#982;')"><xsl:value-of select="'\varpi '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#982;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#1008;')"><xsl:value-of select="'\varkappa '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#1008;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#1009;')"><xsl:value-of select="'\varrho '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#1009;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8194;')"><xsl:value-of select='"\hspace{0.5em}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8194;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8195;')"><xsl:value-of select='"\hspace{1em}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8195;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8196;')"><xsl:value-of select='"\hspace{0.33em}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8196;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8197;')"><xsl:value-of select='"\hspace{0.25em}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8197;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8201;')"><xsl:value-of select='"\hspace{0.17em}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8201;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8203;')"><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8203;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8214;')"><xsl:value-of select="'\Vert '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8214;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8230;')"><xsl:value-of select="'\dots '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8230;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8242;')"><xsl:value-of select="'\prime '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8242;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8289;')"><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8289;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8290;')"><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8290;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8291;')"><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8291;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8459;')"><xsl:value-of select="'\mathscr{H}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8459;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8463;&#65024;')"><xsl:value-of select="'\hbar '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8463;&#65024;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8463;')"><xsl:value-of select="'\hslash '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8463;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8465;')"><xsl:value-of select="'\Im '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8465;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8467;')"><xsl:value-of select="'\ell '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8467;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8469;')"><xsl:value-of select="'\mathbb{N}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8469;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8472;')"><xsl:value-of select="'\wp '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8472;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8473;')"><xsl:value-of select="'\mathbb{P}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8473;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8474;')"><xsl:value-of select="'\mathbb{Q}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8474;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8476;')"><xsl:value-of select="'\Re '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8476;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8484;')"><xsl:value-of select="'\mathbb{Z}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8484;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8486;')"><xsl:value-of select="'\Omega '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8486;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8487;')"><xsl:value-of select="'\mho '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8487;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8501;')"><xsl:value-of select="'\aleph '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8501;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8502;')"><xsl:value-of select="'\beth '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8502;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8503;')"><xsl:value-of select="'\gimel '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8503;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8504;')"><xsl:value-of select="'\daleth '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8504;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8517;')"><xsl:value-of select="'D'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8517;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8518;')"><xsl:value-of select="'d'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8518;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8519;')"><xsl:value-of select="'e'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8519;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8520;')"><xsl:value-of select="'i'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8520;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8521;')"><xsl:value-of select="'j'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8521;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8592;')"><xsl:value-of select="'\leftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8592;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8593;')"><xsl:value-of select="'\uparrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8593;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8594;')"><xsl:value-of select="'\to '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8594;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8595;')"><xsl:value-of select="'\downarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8595;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8596;')"><xsl:value-of select="'\leftrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8596;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8597;')"><xsl:value-of select="'\updownarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8597;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8598;')"><xsl:value-of select="'\nwarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8598;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8599;')"><xsl:value-of select="'\nearrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8599;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8600;')"><xsl:value-of select="'\searrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8600;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8601;')"><xsl:value-of select="'\swarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8601;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8602;')"><xsl:value-of select="'\nleftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8602;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8603;')"><xsl:value-of select="'\nrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8603;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8605;')"><xsl:value-of select="'\rightsquigarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8605;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8606;')"><xsl:value-of select="'\twoheadleftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8606;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8608;')"><xsl:value-of select="'\twoheadrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8608;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8610;')"><xsl:value-of select="'\leftarrowtail '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8610;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8611;')"><xsl:value-of select="'\rightarrowtail '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8611;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8614;')"><xsl:value-of select="'\mapsto '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8614;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8617;')"><xsl:value-of select="'\hookleftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8617;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8618;')"><xsl:value-of select="'\hookrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8618;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8619;')"><xsl:value-of select="'\looparrowleft '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8619;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8620;')"><xsl:value-of select="'\looparrowright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8620;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8621;')"><xsl:value-of select="'\leftrightsquigarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8621;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8622;')"><xsl:value-of select="'\nleftrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8622;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8624;')"><xsl:value-of select="'\Lsh '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8624;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8625;')"><xsl:value-of select="'\Rsh '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8625;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8630;')"><xsl:value-of select="'\curvearrowleft '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8630;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8631;')"><xsl:value-of select="'\curvearrowright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8631;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8634;')"><xsl:value-of select="'\circlearrowleft '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8634;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8635;')"><xsl:value-of select="'\circlearrowright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8635;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8636;')"><xsl:value-of select="'\leftharpoonup '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8636;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8637;')"><xsl:value-of select="'\leftharpoondown '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8637;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8638;')"><xsl:value-of select="'\upharpoonright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8638;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8639;')"><xsl:value-of select="'\upharpoonleft '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8639;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8640;')"><xsl:value-of select="'\rightharpoonup '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8640;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8641;')"><xsl:value-of select="'\rightharpoondown '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8641;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8642;')"><xsl:value-of select="'\downharpoonright '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8642;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8643;')"><xsl:value-of select="'\downharpoonleft '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8643;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8644;')"><xsl:value-of select="'\rightleftarrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8644;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8646;')"><xsl:value-of select="'\leftrightarrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8646;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8647;')"><xsl:value-of select="'\leftleftarrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8647;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8648;')"><xsl:value-of select="'\upuparrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8648;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8649;')"><xsl:value-of select="'\rightrightarrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8649;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8650;')"><xsl:value-of select="'\downdownarrows '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8650;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8651;')"><xsl:value-of select="'\leftrightharpoons '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8651;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8652;')"><xsl:value-of select="'\rightleftharpoons '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8652;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8653;')"><xsl:value-of select="'\nLeftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8653;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8654;')"><xsl:value-of select="'\nLeftrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8654;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8655;')"><xsl:value-of select="'\nRightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8655;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8656;')"><xsl:value-of select="'\Leftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8656;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8657;')"><xsl:value-of select="'\Uparrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8657;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8658;')"><xsl:value-of select="'\Rightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8658;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8659;')"><xsl:value-of select="'\Downarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8659;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8660;')"><xsl:value-of select="'\iff '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8660;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8661;')"><xsl:value-of select="'\Updownarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8661;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8666;')"><xsl:value-of select="'\Lleftarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8666;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8667;')"><xsl:value-of select="'\Rrightarrow '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8667;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8704;')"><xsl:value-of select="'\forall '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8704;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8705;')"><xsl:value-of select="'\complement '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8705;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8706;')"><xsl:value-of select="'\partial '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8706;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8707;')"><xsl:value-of select="'\exists '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8707;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8708;')"><xsl:value-of select="'\nexists '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8708;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8709;&#65024;')"><xsl:value-of select="'\emptyset '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8709;&#65024;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8709;')"><xsl:value-of select="'\varnothing '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8709;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8711;')"><xsl:value-of select="'\nabla '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8711;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8712;')"><xsl:value-of select="'\in '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8712;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8713;')"><xsl:value-of select="'\notin '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8713;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8715;')"><xsl:value-of select="'\ni '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8715;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8716;')"><xsl:value-of select="'\not\ni '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8716;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8719;')"><xsl:value-of select="'\prod '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8719;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8720;')"><xsl:value-of select="'\coprod '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8720;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8721;')"><xsl:value-of select="'\sum '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8721;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8722;')"><xsl:value-of select="'-'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8722;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8723;')"><xsl:value-of select="'\mp '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8723;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8724;')"><xsl:value-of select="'\dotplus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8724;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8726;')"><xsl:value-of select="'\setminus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8726;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8727;')"><xsl:value-of select="'\ast '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8727;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8728;')"><xsl:value-of select="'\circ '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8728;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8729;')"><xsl:value-of select="'\bullet '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8729;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8730;')"><xsl:value-of select="'\surd '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8730;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8733;')"><xsl:value-of select="'\propto '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8733;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8734;')"><xsl:value-of select="'\infty '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8734;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8736;')"><xsl:value-of select="'\angle '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8736;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8737;')"><xsl:value-of select="'\measuredangle '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8737;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8738;')"><xsl:value-of select="'\sphericalangle '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8738;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8739;')"><xsl:value-of select="'\mid '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8739;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8740;&#65024;')"><xsl:value-of select="'\nshortmid '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8740;&#65024;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8740;')"><xsl:value-of select="'\nmid '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8740;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8741;')"><xsl:value-of select="'\parallel '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8741;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8742;&#65024;')"><xsl:value-of select="'\nshortparallel '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8742;&#65024;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8742;')"><xsl:value-of select="'\nparallel '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8742;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8743;')"><xsl:value-of select="'\wedge '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8743;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8744;')"><xsl:value-of select="'\vee '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8744;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8745;')"><xsl:value-of select="'\cap '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8745;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8746;')"><xsl:value-of select="'\cup '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8746;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8747;')"><xsl:value-of select="'\int '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8747;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8748;')"><xsl:value-of select="'\iint '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8748;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8749;')"><xsl:value-of select="'\iiint '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8749;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8750;')"><xsl:value-of select="'\oint '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8750;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8756;')"><xsl:value-of select="'\therefore '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8756;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8757;')"><xsl:value-of select="'\because '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8757;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8758;')"><xsl:value-of select="':'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8758;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8759;')"><xsl:value-of select="'\colon\colon '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8759;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8760;')"><xsl:value-of select="'\dot{-}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8760;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8764;')"><xsl:value-of select="'\sim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8764;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8765;')"><xsl:value-of select="'\backsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8765;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8768;')"><xsl:value-of select="'\wr '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8768;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8769;')"><xsl:value-of select="'\nsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8769;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8770;')"><xsl:value-of select="'\eqsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8770;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8771;')"><xsl:value-of select="'\simeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8771;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8772;')"><xsl:value-of select="'\not\simeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8772;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8773;')"><xsl:value-of select="'\cong '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8773;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8775;')"><xsl:value-of select="'\ncong '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8775;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8776;')"><xsl:value-of select="'\approx '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8776;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8777;')"><xsl:value-of select="'\not\approx '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8777;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8778;')"><xsl:value-of select="'\approxeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8778;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8781;')"><xsl:value-of select="'\asymp '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8781;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8782;')"><xsl:value-of select="'\Bumpeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8782;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8783;')"><xsl:value-of select="'\bumpeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8783;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8784;')"><xsl:value-of select="'\doteq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8784;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8785;')"><xsl:value-of select="'\doteqdot '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8785;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8786;')"><xsl:value-of select="'\fallingdotseq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8786;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8787;')"><xsl:value-of select="'\risingdotseq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8787;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8790;')"><xsl:value-of select="'\eqcirc '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8790;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8791;')"><xsl:value-of select="'\circeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8791;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8792;')"><xsl:value-of select="'\stackrel{\frown}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8792;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8793;')"><xsl:value-of select="'\stackrel{\wedge}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8793;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8794;')"><xsl:value-of select="'\stackrel{\vee}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8794;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8795;')"><xsl:value-of select="'\stackrel{\star}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8795;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8796;')"><xsl:value-of select="'\triangleq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8796;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8797;')"><xsl:value-of select="'\stackrel{\scriptscriptstyle\mathrm{def}}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8797;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8798;')"><xsl:value-of select="'\stackrel{\scriptscriptstyle\mathrm{m}}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8798;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8799;')"><xsl:value-of select="'\stackrel{?}{=}'"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8799;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8800;')"><xsl:value-of select="'\ne '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8800;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8801;')"><xsl:value-of select="'\equiv '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8801;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8802;')"><xsl:value-of select="'\not\equiv '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8802;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8804;')"><xsl:value-of select="'\le '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8804;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8805;')"><xsl:value-of select="'\ge '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8805;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8806;')"><xsl:value-of select="'\leqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8806;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8807;')"><xsl:value-of select="'\geqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8807;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8808;')"><xsl:value-of select="'\lneqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8808;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8809;')"><xsl:value-of select="'\gneqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8809;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8810;')"><xsl:value-of select="'\ll '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8810;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8811;')"><xsl:value-of select="'\gg '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8811;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8812;')"><xsl:value-of select="'\between '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8812;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8813;')"><xsl:value-of select="'\not\asymp '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8813;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8814;')"><xsl:value-of select="'\nless '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8814;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8815;')"><xsl:value-of select="'\ngtr '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8815;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8816;&#8421;')"><xsl:value-of select="'\nleq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8816;&#8421;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8816;')"><xsl:value-of select="'\nleqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8816;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8817;&#8421;')"><xsl:value-of select="'\ngeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8817;&#8421;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8817;')"><xsl:value-of select="'\ngeqq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8817;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8818;')"><xsl:value-of select="'\lesssim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8818;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8819;')"><xsl:value-of select="'\gtrsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8819;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8820;')"><xsl:value-of select="'\not\lesssim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8820;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8821;')"><xsl:value-of select="'\not\gtrsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8821;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8822;')"><xsl:value-of select="'\lessgtr '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8822;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8823;')"><xsl:value-of select="'\gtrless '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8823;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8824;')"><xsl:value-of select="'\not\lessgtr '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8824;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8825;')"><xsl:value-of select="'\not\gtrless '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8825;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8826;')"><xsl:value-of select="'\prec '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8826;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8827;')"><xsl:value-of select="'\succ '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8827;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8828;')"><xsl:value-of select="'\preccurlyeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8828;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8829;')"><xsl:value-of select="'\succcurlyeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8829;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8830;')"><xsl:value-of select="'\precsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8830;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8831;')"><xsl:value-of select="'\succsim '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8831;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8832;')"><xsl:value-of select="'\nprec '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8832;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8833;')"><xsl:value-of select="'\nsucc '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8833;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8834;')"><xsl:value-of select="'\subset '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8834;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8835;')"><xsl:value-of select="'\supset '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8835;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8836;')"><xsl:value-of select="'\not\subset '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8836;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8837;')"><xsl:value-of select="'\not\supset '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8837;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8838;')"><xsl:value-of select="'\subseteq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8838;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8839;')"><xsl:value-of select="'\supseteq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8839;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8846;')"><xsl:value-of select="'\uplus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8846;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8851;')"><xsl:value-of select="'\sqcap '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8851;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8852;')"><xsl:value-of select="'\bigsqcup '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8852;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8853;')"><xsl:value-of select="'\oplus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8853;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8854;')"><xsl:value-of select="'\ominus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8854;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8855;')"><xsl:value-of select="'\otimes '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8855;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8856;')"><xsl:value-of select="'\oslash '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8856;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8857;')"><xsl:value-of select="'\odot '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8857;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8863;')"><xsl:value-of select="'\boxminus '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8863;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8868;')"><xsl:value-of select="'\top '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8868;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8869;')"><xsl:value-of select="'\perp '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8869;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8870;')"><xsl:value-of select="'\vdash '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8870;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8871;')"><xsl:value-of select="'\vDash '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8871;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8872;')"><xsl:value-of select="'\models '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8872;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8874;')"><xsl:value-of select="'\Vvdash '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8874;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8896;')"><xsl:value-of select="'\bigwedge '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8896;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8897;')"><xsl:value-of select="'\bigvee '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8897;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8898;')"><xsl:value-of select="'\bigcap '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8898;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8899;')"><xsl:value-of select="'\bigcup '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8899;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8900;')"><xsl:value-of select="'\diamond '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8900;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8901;')"><xsl:value-of select="'\cdot '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8901;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8902;')"><xsl:value-of select="'\star '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8902;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8903;')"><xsl:value-of select="'\divideontimes '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8903;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8904;')"><xsl:value-of select="'\bowtie '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8904;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8909;')"><xsl:value-of select="'\backsimeq '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8909;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8943;')"><xsl:value-of select="'\cdots '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8943;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8945;')"><xsl:value-of select="'\ddots '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8945;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8968;')"><xsl:value-of select="'\lceil '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8968;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8969;')"><xsl:value-of select="'\rceil '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8969;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8970;')"><xsl:value-of select="'\lfloor '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8970;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8971;')"><xsl:value-of select="'\rfloor '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#8971;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#9001;')"><xsl:value-of select="'\langle '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#9001;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#9002;')"><xsl:value-of select="'\rangle '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#9002;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#9633;')"><xsl:value-of select="'\square '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#9633;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#9642;')"><xsl:value-of select="'\blacksquare '"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&#9642;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,&quot;'&quot;)"><xsl:value-of select="&quot;'&quot;"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, &quot;'&quot;)"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"{")'><xsl:value-of select='"\{"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '{')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"}")'><xsl:value-of select='"\}"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '}')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"$")'><xsl:value-of select='"\$"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '$')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"#")'><xsl:value-of select='"\#"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '#')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"&amp;")'><xsl:value-of select='"\&amp;"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '&amp;')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"%")'><xsl:value-of select='"\%"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '%')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"_")'><xsl:value-of select='"\_"'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '_')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"\")'><xsl:value-of select='"\backslash "'/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring-after($content, '\')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring($content,1,1)"/><xsl:call-template name="replaceEntities"><xsl:with-param name="content" select="substring($content, 2)"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="replaceMtextEntities"><xsl:param name="content"/><xsl:if test="string-length($content)&gt;0"><xsl:choose><xsl:when test="starts-with($content,'&#8201;&#8202;&#8202;')"><xsl:value-of select='"\hspace{0.28em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8201;&#8202;&#8202;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8194;')"><xsl:value-of select='"\hspace{0.5em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8194;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8195;')"><xsl:value-of select='"\hspace{1em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8195;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8196;')"><xsl:value-of select='"\hspace{0.33em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8196;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8197;')"><xsl:value-of select='"\hspace{0.25em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8197;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8201;')"><xsl:value-of select='"\hspace{0.17em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8201;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8202;')"><xsl:value-of select='"\hspace{0.05em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8202;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8203;')"><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8203;')"/></xsl:call-template></xsl:when><xsl:when test="starts-with($content,'&#8287;')"><xsl:value-of select='"\hspace{0.22em}"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&#8287;')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"$")'><xsl:value-of select='"\$"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '$')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"#")'><xsl:value-of select='"\#"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '#')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"&amp;")'><xsl:value-of select='"\&amp;"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '&amp;')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"%")'><xsl:value-of select='"\%"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '%')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"_")'><xsl:value-of select='"\_"'/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '_')"/></xsl:call-template></xsl:when><xsl:when test='starts-with($content,"\")'><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring-after($content, '\')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring($content,1,1)"/><xsl:call-template name="replaceMtextEntities"><xsl:with-param name="content" select="substring($content, 2)"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template match="m:cn"><xsl:apply-templates/></xsl:template><xsl:template match="m:cn[@type='complex-cartesian']"><xsl:apply-templates select="text()[1]"/><xsl:text>+</xsl:text><xsl:apply-templates select="text()[2]"/><xsl:text>i</xsl:text></xsl:template><xsl:template match="m:cn[@type='rational']"><xsl:apply-templates select="text()[1]"/><xsl:text>/</xsl:text><xsl:apply-templates select="text()[2]"/></xsl:template><xsl:template match="m:cn[@type='integer' and @base!=10]"><xsl:apply-templates/><xsl:text>_{</xsl:text><xsl:value-of select="@base"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:cn[@type='complex-polar']"><xsl:apply-templates select="text()[1]"/><xsl:text>e^{i </xsl:text><xsl:apply-templates select="text()[2]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:cn[@type='e-notation']"><xsl:apply-templates select="text()[1]"/><xsl:text>E</xsl:text><xsl:apply-templates select="text()[2]"/></xsl:template><xsl:template match="m:ci | m:csymbol"><xsl:choose><xsl:when test="string-length(normalize-space(text()))&gt;1"><xsl:text>\mathrm{</xsl:text><xsl:apply-templates/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:apply-templates/></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:apply | m:reln"><xsl:apply-templates select="*[1]"><xsl:with-param name="p" select="10"/></xsl:apply-templates><xsl:text>(</xsl:text><xsl:for-each select="*[position()&gt;1]"><xsl:apply-templates select="."/><xsl:if test="not(position()=last())"><xsl:text>, </xsl:text></xsl:if></xsl:for-each><xsl:text>)</xsl:text></xsl:template><xsl:template match="m:fn[m:apply[1]]"><xsl:text>(</xsl:text><xsl:apply-templates/><xsl:text>)</xsl:text></xsl:template><xsl:template match="m:interval[*[2]]"><xsl:choose><xsl:when test="@closure='open' or @closure='open-closed'"><xsl:text>\left(</xsl:text></xsl:when><xsl:otherwise><xsl:text>\left[</xsl:text></xsl:otherwise></xsl:choose><xsl:apply-templates select="*[1]"/><xsl:text> , </xsl:text><xsl:apply-templates select="*[2]"/><xsl:choose><xsl:when test="@closure='open' or @closure='closed-open'"><xsl:text>\right)</xsl:text></xsl:when><xsl:otherwise><xsl:text>\right]</xsl:text></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:interval"><xsl:text>\left\{</xsl:text><xsl:apply-templates/><xsl:text>\right\}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:inverse]]"><xsl:apply-templates select="*[2]"/><xsl:text>^{(-1)}</xsl:text></xsl:template><xsl:template match="m:sep | m:condition"><xsl:apply-templates/></xsl:template><xsl:template match="m:lambda"><xsl:apply-templates select="m:bvar/*"/><xsl:text>\mapsto </xsl:text><xsl:apply-templates select="*[last()]"/></xsl:template><xsl:template match="m:apply[*[1][self::m:compose]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\circ </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:ident"><xsl:text>\mathrm{id}</xsl:text></xsl:template><xsl:template match="m:domain | m:codomain | m:image | m:arg | m:lcm | m:grad |          m:curl | m:median | m:mode"><xsl:text>\mathop{\mathrm{</xsl:text><xsl:value-of select="local-name()"/><xsl:text>}}</xsl:text></xsl:template><xsl:template match="m:domainofapplication"/><xsl:template match="m:piecewise"><xsl:text>\begin{cases}</xsl:text><xsl:apply-templates select="m:piece"/><xsl:apply-templates select="m:otherwise"/><xsl:text>\end{cases}</xsl:text></xsl:template><xsl:template match="m:piece"><xsl:apply-templates select="*[1]"/><xsl:text xml:space="preserve"> &amp; \text{if $</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>$}</xsl:text><xsl:if test="not(position()=last()) or ../m:otherwise"><xsl:text>\\ </xsl:text></xsl:if></xsl:template><xsl:template match="m:otherwise"><xsl:apply-templates select="*[1]"/><xsl:text xml:space="preserve"> &amp; \text{otherwise}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:quotient]]"><xsl:text>\left\lfloor\frac{</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>}{</xsl:text><xsl:apply-templates select="*[3]"/><xsl:text>}\right\rfloor </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:factorial]]"><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates><xsl:text>!</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:divide]]"><xsl:param name="p" select="0"/><xsl:param name="this-p" select="3"/><xsl:if test="$this-p &lt; $p"><xsl:text>\left(</xsl:text></xsl:if><xsl:text>\frac{</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>}{</xsl:text><xsl:apply-templates select="*[3]"/><xsl:text>}</xsl:text><xsl:if test="$this-p &lt; $p"><xsl:text>\right)</xsl:text></xsl:if></xsl:template><xsl:template match="m:apply[*[1][self::m:max or self::m:min]]"><xsl:text>\</xsl:text><xsl:value-of select="local-name(*[1])"/><xsl:text>\{</xsl:text><xsl:choose><xsl:when test="m:condition"><xsl:apply-templates select="*[last()]"/><xsl:text>\mid </xsl:text><xsl:apply-templates select="m:condition/node()"/></xsl:when><xsl:otherwise><xsl:for-each select="*[position() &gt; 1]"><xsl:apply-templates select="."/><xsl:if test="position() !=last()"><xsl:text> , </xsl:text></xsl:if></xsl:for-each></xsl:otherwise></xsl:choose><xsl:text>\}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:minus] and count(*)=2]"><xsl:text>-</xsl:text><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="5"/></xsl:apply-templates></xsl:template><xsl:template match="m:apply[*[1][self::m:minus] and count(*)&gt;2]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo">-</xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="2"/></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:plus]]"><xsl:param name="p" select="0"/><xsl:if test="$p &gt; 2"><xsl:text>(</xsl:text></xsl:if><xsl:for-each select="*[position()&gt;1]"><xsl:if test="position() &gt; 1"><xsl:choose><xsl:when test="self::m:apply[*[1][self::m:times] and       *[2][self::m:apply/*[1][self::m:minus] or self::m:cn[not(m:sep) and       (number(.) &lt; 0)]]]">-</xsl:when><xsl:otherwise>+</xsl:otherwise></xsl:choose></xsl:if><xsl:choose><xsl:when test="self::m:apply[*[1][self::m:times] and       *[2][self::m:cn[not(m:sep) and (number(.) &lt;0)]]]"><xsl:value-of select="-(*[2])"/><xsl:apply-templates select="."><xsl:with-param name="first" select="2"/><xsl:with-param name="p" select="2"/></xsl:apply-templates></xsl:when><xsl:when test="self::m:apply[*[1][self::m:times] and       *[2][self::m:apply/*[1][self::m:minus]]]"><xsl:apply-templates select="./*[2]/*[2]"/><xsl:apply-templates select="."><xsl:with-param name="first" select="2"/><xsl:with-param name="p" select="2"/></xsl:apply-templates></xsl:when><xsl:otherwise><xsl:apply-templates select="."><xsl:with-param name="p" select="2"/></xsl:apply-templates></xsl:otherwise></xsl:choose></xsl:for-each><xsl:if test="$p &gt; 2"><xsl:text>)</xsl:text></xsl:if></xsl:template><xsl:template match="m:apply[*[1][self::m:power]]"><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="5"/></xsl:apply-templates><xsl:text>^{</xsl:text><xsl:apply-templates select="*[3]"><xsl:with-param name="p" select="5"/></xsl:apply-templates><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:rem]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo">\mod </xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="3"/></xsl:call-template></xsl:template><xsl:template name="times" match="m:apply[*[1][self::m:times]]"><xsl:param name="p" select="0"/><xsl:param name="first" select="1"/><xsl:if test="$p &gt; 3"><xsl:text>(</xsl:text></xsl:if><xsl:for-each select="*[position()&gt;1]"><xsl:if test="position() &gt; 1"><xsl:choose><xsl:when test="self::m:cn">\times </xsl:when><xsl:otherwise/></xsl:choose></xsl:if><xsl:if test="position()&gt;= $first"><xsl:apply-templates select="."><xsl:with-param name="p" select="3"/></xsl:apply-templates></xsl:if></xsl:for-each><xsl:if test="$p &gt; 3"><xsl:text>)</xsl:text></xsl:if></xsl:template><xsl:template match="m:apply[*[1][self::m:root]]"><xsl:text>\sqrt</xsl:text><xsl:if test="m:degree!=2"><xsl:text>[</xsl:text><xsl:apply-templates select="m:degree/*"/><xsl:text>]</xsl:text></xsl:if><xsl:text>{</xsl:text><xsl:apply-templates select="*[position()&gt;1 and not(self::m:degree)]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:gcd"><xsl:text>\gcd </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:and]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\land </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:or]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="3"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\lor </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:xor]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="3"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\mathop{\mathrm{xor}}</xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:not]]"><xsl:text>\neg </xsl:text><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template match="m:apply[*[1][self::m:implies]] | m:reln[*[1][self::m:implies]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo">\implies </xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="3"/></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:forall or self::m:exists]]"><xsl:text>\</xsl:text><xsl:value-of select="local-name(*[1])"/><xsl:text xml:space="preserve"> </xsl:text><xsl:apply-templates select="m:bvar"/><xsl:if test="m:condition"><xsl:text>, </xsl:text><xsl:apply-templates select="m:condition"/></xsl:if><xsl:if test="*[last()][local-name()!='condition'][local-name()!='bvar']"><xsl:text>\colon </xsl:text><xsl:apply-templates select="*[last()]"/></xsl:if></xsl:template><xsl:template match="m:apply[*[1][self::m:abs]]"><xsl:text>\left|</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>\right|</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:conjugate]]"><xsl:text>\overline{</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:real"><xsl:text>\Re </xsl:text></xsl:template><xsl:template match="m:imaginary"><xsl:text>\Im </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:floor]]"><xsl:text>\lfloor </xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>\rfloor </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:ceiling]]"><xsl:text>\lceil </xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>\rceil </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:eq]] | m:reln[*[1][self::m:eq]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">=</xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:neq]] | m:reln[*[1][self::m:neq]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\neq </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:gt]] | m:reln[*[1][self::m:gt]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo" xml:space="preserve">&gt; </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:lt]] | m:reln[*[1][self::m:lt]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo" xml:space="preserve">&lt; </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:geq]] | m:reln[*[1][self::m:geq]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\ge </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:leq]] | m:reln[*[1][self::m:leq]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\le </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:equivalent]] | m:reln[*[1][self::m:equivalent]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\equiv </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:approx]] | m:reln[*[1][self::m:approx]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="1"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\approx </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:factorof]] | m:reln[*[1][self::m:factorof]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo"> | </xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="3"/></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:int]]"><xsl:text>\int</xsl:text><xsl:if test="m:lowlimit/*|m:interval/*[1]|m:condition/*"><xsl:text>_{</xsl:text><xsl:apply-templates select="m:lowlimit/*|m:interval/*[1]|m:condition/*"/><xsl:text>}</xsl:text></xsl:if><xsl:if test="m:uplimit/*|m:interval/*[2]"><xsl:text>^{</xsl:text><xsl:apply-templates select="m:uplimit/*|m:interval/*[2]"/><xsl:text>}</xsl:text></xsl:if><xsl:text xml:space="preserve"> </xsl:text><xsl:apply-templates select="*[last()]"/><xsl:text>\,d </xsl:text><xsl:apply-templates select="m:bvar"/></xsl:template><xsl:template priority="2" match="m:apply[*[1][self::m:diff] and m:ci and count(*)=2]"><xsl:apply-templates select="*[2]"/><xsl:text>^\prime </xsl:text></xsl:template><xsl:template priority="1" match="m:apply[*[1][self::m:diff]]"><xsl:text>\frac{</xsl:text><xsl:choose><xsl:when test="m:bvar/m:degree"><xsl:text>d^{</xsl:text><xsl:apply-templates select="m:bvar/m:degree/node()"/><xsl:text>}</xsl:text><xsl:apply-templates select="*[last()]"/><xsl:text>}{d</xsl:text><xsl:apply-templates select="m:bvar/node()"/><xsl:text>^{</xsl:text><xsl:apply-templates select="m:bvar/m:degree/node()"/><xsl:text>}</xsl:text></xsl:when><xsl:otherwise><xsl:text>d </xsl:text><xsl:apply-templates select="*[last()]"/><xsl:text>}{d </xsl:text><xsl:apply-templates select="m:bvar"/></xsl:otherwise></xsl:choose><xsl:text>}</xsl:text></xsl:template><xsl:template priority="2" match="m:apply[*[1][self::m:partialdiff] and m:list and m:ci and count(*)=3]"><xsl:text>D_{</xsl:text><xsl:for-each select="m:list[1]/*"><xsl:apply-templates select="."/><xsl:if test="position()&lt;last()"><xsl:text>, </xsl:text></xsl:if></xsl:for-each><xsl:text>}</xsl:text><xsl:apply-templates select="*[3]"/></xsl:template><xsl:template priority="1" match="m:apply[*[1][self::m:partialdiff]]"><xsl:text>\frac{\partial^{</xsl:text><xsl:choose><xsl:when test="m:degree"><xsl:apply-templates select="m:degree/node()"/></xsl:when><xsl:when test="m:bvar/m:degree[string(number(.))='NaN']"><xsl:for-each select="m:bvar/m:degree"><xsl:apply-templates select="node()"/><xsl:if test="position()&lt;last()"><xsl:text>+</xsl:text></xsl:if></xsl:for-each><xsl:if test="count(m:bvar[not(m:degree)])&gt;0"><xsl:text>+</xsl:text><xsl:value-of select="count(m:bvar[not(m:degree)])"/></xsl:if></xsl:when><xsl:otherwise><xsl:value-of select="sum(m:bvar/m:degree)+count(m:bvar[not(m:degree)])"/></xsl:otherwise></xsl:choose><xsl:text>}</xsl:text><xsl:apply-templates select="*[last()]"/><xsl:text>}{</xsl:text><xsl:for-each select="m:bvar"><xsl:text>\partial </xsl:text><xsl:apply-templates select="node()"/><xsl:if test="m:degree"><xsl:text>^{</xsl:text><xsl:apply-templates select="m:degree/node()"/><xsl:text>}</xsl:text></xsl:if></xsl:for-each><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:declare | m:lowlimit | m:uplimit | m:degree | m:momentabout"/><xsl:template match="m:bvar"><xsl:apply-templates/><xsl:if test="following-sibling::m:bvar"><xsl:text>, </xsl:text></xsl:if></xsl:template><xsl:template match="m:divergence"><xsl:text>\mathop{\mathrm{div}}</xsl:text></xsl:template><xsl:template match="m:laplacian"><xsl:text>\nabla^2 </xsl:text></xsl:template><xsl:template match="m:set"><xsl:text>\{</xsl:text><xsl:call-template name="set"/><xsl:text>\}</xsl:text></xsl:template><xsl:template match="m:list"><xsl:text>\left[</xsl:text><xsl:call-template name="set"/><xsl:text>\right]</xsl:text></xsl:template><xsl:template name="set"><xsl:choose><xsl:when test="m:condition"><xsl:apply-templates select="m:bvar/*[not(self::bvar or self::condition)]"/><xsl:text>\colon </xsl:text><xsl:apply-templates select="m:condition/node()"/></xsl:when><xsl:otherwise><xsl:for-each select="*"><xsl:apply-templates select="."/><xsl:if test="position()!=last()"><xsl:text>, </xsl:text></xsl:if></xsl:for-each></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:apply[*[1][self::m:union]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\cup </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:intersect]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="3"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\cap </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:in]] | m:reln[*[1][self::m:in]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo">\in </xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="3"/></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:notin]] | m:reln[*[1][self::m:notin]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="mo">\notin </xsl:with-param><xsl:with-param name="p" select="$p"/><xsl:with-param name="this-p" select="3"/></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:subset]] | m:reln[*[1][self::m:subset]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\subseteq </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:prsubset]] | m:reln[*[1][self::m:prsubset]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\subset </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:notsubset]] | m:reln[*[1][self::m:notsubset]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\nsubseteq </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:notprsubset]] | m:reln[*[1][self::m:notprsubset]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\not\subset </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:setdiff]]"><xsl:param name="p" select="0"/><xsl:call-template name="binary"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\setminus </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:card]]"><xsl:text>|</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>|</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:cartesianproduct or self::m:vectorproduct]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\times </xsl:with-param></xsl:call-template></xsl:template><xsl:template priority="2" match="m:apply[*[1][self::m:cartesianproduct][count(following-sibling::m:reals)=count(following-sibling::*)]]"><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="5"/></xsl:apply-templates><xsl:text>^{</xsl:text><xsl:value-of select="count(*)-1"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:sum]]"><xsl:text>\sum</xsl:text><xsl:call-template name="series"/></xsl:template><xsl:template match="m:apply[*[1][self::m:product]]"><xsl:text>\prod</xsl:text><xsl:call-template name="series"/></xsl:template><xsl:template name="series"><xsl:if test="m:lowlimit/*|m:interval/*[1]|m:condition/*"><xsl:text>_{</xsl:text><xsl:if test="not(m:condition)"><xsl:apply-templates select="m:bvar"/><xsl:text>=</xsl:text></xsl:if><xsl:apply-templates select="m:lowlimit/*|m:interval/*[1]|m:condition/*"/><xsl:text>}</xsl:text></xsl:if><xsl:if test="m:uplimit/*|m:interval/*[2]"><xsl:text>^{</xsl:text><xsl:apply-templates select="m:uplimit/*|m:interval/*[2]"/><xsl:text>}</xsl:text></xsl:if><xsl:text xml:space="preserve"> </xsl:text><xsl:apply-templates select="*[last()]"/></xsl:template><xsl:template match="m:apply[*[1][self::m:limit]]"><xsl:text>\lim_{</xsl:text><xsl:apply-templates select="m:lowlimit|m:condition/*"/><xsl:text>}</xsl:text><xsl:apply-templates select="*[last()]"/></xsl:template><xsl:template priority="3" match="m:apply[m:limit]/m:lowlimit"><xsl:apply-templates select="../m:bvar/node()"/><xsl:text>\to </xsl:text><xsl:apply-templates/></xsl:template><xsl:template match="m:apply[*[1][self::m:tendsto]] | m:reln[*[1][self::m:tendsto]]"><xsl:param name="p"/><xsl:call-template name="binary"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo"><xsl:choose><xsl:when test="*[1][@type='above']">\searrow </xsl:when><xsl:when test="*[1][@type='below']">\nearrow </xsl:when><xsl:when test="*[1][@type='two-sided']">\rightarrow </xsl:when><xsl:otherwise>\to </xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][  self::m:sin or   self::m:cos or  self::m:tan or  self::m:sec or  self::m:csc or   self::m:cot or  self::m:sinh or   self::m:cosh or  self::m:tanh or   self::m:coth or self::m:arcsin or  self::m:arccos or  self::m:arctan or  self::m:ln]]"><xsl:text>\</xsl:text><xsl:value-of select="local-name(*[1])"/><xsl:text xml:space="preserve"> </xsl:text><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template match="m:sin | m:cos | m:tan | m:sec | m:csc |          m:cot | m:sinh | m:cosh | m:tanh | m:coth |          m:arcsin | m:arccos | m:arctan | m:ln"><xsl:text>\</xsl:text><xsl:value-of select="local-name(.)"/><xsl:text xml:space="preserve"> </xsl:text></xsl:template><xsl:template match="m:apply[*[1][  self::m:sech or   self::m:csch or  self::m:arccosh or  self::m:arccot or  self::m:arccoth or  self::m:arccsc or  self::m:arccsch or self::m:arcsec or  self::m:arcsech or  self::m:arcsinh or self::m:arctanh]]"><xsl:text>\mathrm{</xsl:text><xsl:value-of select="local-name(*[1])"/><xsl:text>\,}</xsl:text><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template match="m:sech | m:csch | m:arccosh | m:arccot |          m:arccoth | m:arccsc |m:arccsch |m:arcsec |          m:arcsech | m:arcsinh | m:arctanh"><xsl:text>\mathrm{</xsl:text><xsl:value-of select="local-name(.)"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:exp]]"><xsl:text>e^{</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:log]]"><xsl:text>\lg </xsl:text><xsl:apply-templates select="*[last()]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template match="m:apply[*[1][self::m:log] and m:logbase != 10]"><xsl:text>\log_{</xsl:text><xsl:apply-templates select="m:logbase/node()"/><xsl:text>}</xsl:text><xsl:apply-templates select="*[last()]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template match="m:apply[*[1][self::m:mean]]"><xsl:text>\langle </xsl:text><xsl:for-each select="*[position()&gt;1]"><xsl:apply-templates select="."/><xsl:if test="position() !=last()"><xsl:text>, </xsl:text></xsl:if></xsl:for-each><xsl:text>\rangle </xsl:text></xsl:template><xsl:template match="m:sdev"><xsl:text>\sigma </xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:variance]]"><xsl:text>\sigma(</xsl:text><xsl:apply-templates select="*[2]"/><xsl:text>)^2</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:moment]]"><xsl:text>\langle </xsl:text><xsl:apply-templates select="*[last()]"/><xsl:text>^{</xsl:text><xsl:apply-templates select="m:degree/node()"/><xsl:text>}\rangle</xsl:text><xsl:if test="m:momentabout"><xsl:text>_{</xsl:text><xsl:apply-templates select="m:momentabout/node()"/><xsl:text>}</xsl:text></xsl:if><xsl:text xml:space="preserve"> </xsl:text></xsl:template><xsl:template match="m:vector"><xsl:text>\left(\begin{array}{c}</xsl:text><xsl:for-each select="*"><xsl:apply-templates select="."/><xsl:if test="position()!=last()"><xsl:text>\\ </xsl:text></xsl:if></xsl:for-each><xsl:text>\end{array}\right)</xsl:text></xsl:template><xsl:template match="m:matrix"><xsl:text>\begin{pmatrix}</xsl:text><xsl:apply-templates/><xsl:text>\end{pmatrix}</xsl:text></xsl:template><xsl:template match="m:matrixrow"><xsl:for-each select="*"><xsl:apply-templates select="."/><xsl:if test="position()!=last()"><xsl:text xml:space="preserve"> &amp; </xsl:text></xsl:if></xsl:for-each><xsl:if test="position()!=last()"><xsl:text>\\ </xsl:text></xsl:if></xsl:template><xsl:template match="m:apply[*[1][self::m:determinant]]"><xsl:text>\det </xsl:text><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates></xsl:template><xsl:template priority="2" match="m:apply[*[1][self::m:determinant]][*[2][self::m:matrix]]"><xsl:text>\begin{vmatrix}</xsl:text><xsl:apply-templates select="m:matrix/*"/><xsl:text>\end{vmatrix}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:transpose]]"><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates><xsl:text>^T</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:selector]]"><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="7"/></xsl:apply-templates><xsl:text>_{</xsl:text><xsl:for-each select="*[position()&gt;2]"><xsl:apply-templates select="."/><xsl:if test="position() !=last()"><xsl:text>, </xsl:text></xsl:if></xsl:for-each><xsl:text>}</xsl:text></xsl:template><xsl:template match="m:apply[*[1][self::m:scalarproduct]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\cdot </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:apply[*[1][self::m:outerproduct]]"><xsl:param name="p" select="0"/><xsl:call-template name="infix"><xsl:with-param name="this-p" select="2"/><xsl:with-param name="p" select="$p"/><xsl:with-param name="mo">\otimes </xsl:with-param></xsl:call-template></xsl:template><xsl:template match="m:semantics"><xsl:apply-templates select="*[1]"/></xsl:template><xsl:template match="m:semantics[m:annotation/@encoding='TeX']"><xsl:apply-templates select="m:annotation[@encoding='TeX']/node()"/></xsl:template><xsl:template match="m:integers"><xsl:text>\mathbb{Z}</xsl:text></xsl:template><xsl:template match="m:reals"><xsl:text>\mathbb{R}</xsl:text></xsl:template><xsl:template match="m:rationals"><xsl:text>\mathbb{Q}</xsl:text></xsl:template><xsl:template match="m:naturalnumbers"><xsl:text>\mathbb{N}</xsl:text></xsl:template><xsl:template match="m:complexes"><xsl:text>\mathbb{C}</xsl:text></xsl:template><xsl:template match="m:primes"><xsl:text>\mathbb{P}</xsl:text></xsl:template><xsl:template match="m:exponentiale"><xsl:text>e</xsl:text></xsl:template><xsl:template match="m:imaginaryi"><xsl:text>i</xsl:text></xsl:template><xsl:template match="m:notanumber"><xsl:text>NaN</xsl:text></xsl:template><xsl:template match="m:true"><xsl:text>\mbox{true}</xsl:text></xsl:template><xsl:template match="m:false"><xsl:text>\mbox{false}</xsl:text></xsl:template><xsl:template match="m:emptyset"><xsl:text>\emptyset </xsl:text></xsl:template><xsl:template match="m:pi"><xsl:text>\pi </xsl:text></xsl:template><xsl:template match="m:eulergamma"><xsl:text>\gamma </xsl:text></xsl:template><xsl:template match="m:infinity"><xsl:text>\infty </xsl:text></xsl:template><xsl:template name="infix"><xsl:param name="mo"/><xsl:param name="p" select="0"/><xsl:param name="this-p" select="0"/><xsl:if test="$this-p &lt; $p"><xsl:text>(</xsl:text></xsl:if><xsl:for-each select="*[position()&gt;1]"><xsl:if test="position() &gt; 1"><xsl:copy-of select="$mo"/></xsl:if><xsl:apply-templates select="."><xsl:with-param name="p" select="$this-p"/></xsl:apply-templates></xsl:for-each><xsl:if test="$this-p &lt; $p"><xsl:text>)</xsl:text></xsl:if></xsl:template><xsl:template name="binary"><xsl:param name="mo"/><xsl:param name="p" select="0"/><xsl:param name="this-p" select="0"/><xsl:if test="$this-p &lt; $p"><xsl:text>(</xsl:text></xsl:if><xsl:apply-templates select="*[2]"><xsl:with-param name="p" select="$this-p"/></xsl:apply-templates><xsl:value-of select="$mo"/><xsl:apply-templates select="*[3]"><xsl:with-param name="p" select="$this-p"/></xsl:apply-templates><xsl:if test="$this-p &lt; $p"><xsl:text>)</xsl:text></xsl:if></xsl:template><xsl:strip-space elements="m:*"/><xsl:template match="m:math[not(@mode) or @mode='inline'][not(@display)] | m:math[@display='inline']"><xsl:text xml:space="preserve">$ </xsl:text><xsl:apply-templates/><xsl:text>$</xsl:text></xsl:template><xsl:template match="m:math[@display='block'] | m:math[@mode='display'][not(@display)]"><xsl:text xml:space="preserve">$$ </xsl:text><xsl:apply-templates/><xsl:text>$$</xsl:text></xsl:template></xsl:stylesheet>