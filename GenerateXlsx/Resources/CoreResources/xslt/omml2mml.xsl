<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns="http://www.w3.org/1998/Math/MathML" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" exclude-result-prefixes="m w" version="2.0"><xsl:variable name="sOperators" select="concat(      '!&quot;#&amp;()+,-./:',           ';&lt;=&gt;?@[\]^_{',           '|}~&#161;&#166;&#172;&#175;&#176;&#177;&#178;&#179;&#183;&#185;&#191;',           '&#215;&#247;&#768;&#769;&#770;&#771;&#772;&#773;&#774;&#775;&#776;&#777;',           '&#778;&#779;&#780;&#781;&#782;&#783;&#784;&#785;&#786;&#787;&#788;&#789;',           '&#790;&#791;&#792;&#793;&#794;&#795;&#796;&#797;&#798;&#799;&#800;&#801;',           '&#802;&#803;&#804;&#805;&#806;&#807;&#808;&#809;&#810;&#811;&#812;&#813;',           '&#814;&#815;&#816;&#817;&#818;&#819;&#820;&#821;&#822;&#823;&#824;&#831;',           '&#8192;&#8193;&#8194;&#8195;&#8196;&#8197;&#8198;&#8201;&#8202;&#8208;&#8210;&#8211;',           '&#8212;&#8214;&#8224;&#8225;&#8226;&#8228;&#8229;&#8230;&#8242;&#8243;&#8244;&#8252;',           '&#8256;&#8260;&#8270;&#8271;&#8272;&#8279;&#8289;&#8290;&#8291;&#8304;&#8308;&#8309;',           '&#8310;&#8311;&#8312;&#8313;&#8314;&#8315;&#8316;&#8317;&#8318;&#8320;&#8321;&#8322;',           '&#8323;&#8324;&#8325;&#8326;&#8327;&#8328;&#8329;&#8330;&#8331;&#8332;&#8333;&#8334;',           '&#8400;&#8401;&#8402;&#8403;&#8404;&#8405;&#8406;&#8407;&#8408;&#8409;&#8410;&#8411;',           '&#8412;&#8413;&#8414;&#8415;&#8416;&#8417;&#8420;&#8421;&#8422;&#8423;&#8424;&#8425;',           '&#8426;&#8512;&#2146;&#8592;&#8593;&#8594;&#8595;&#8596;&#8597;&#8598;&#8599;&#8600;&#8601;',           '&#8602;&#8603;&#8604;&#8605;&#8606;&#8607;&#8608;&#8609;&#8610;&#8611;&#8612;&#8613;',           '&#8614;&#8615;&#8616;&#8617;&#8618;&#8619;&#8620;&#8621;&#8622;&#8623;&#8624;&#8625;',           '&#8626;&#8627;&#8630;&#8631;&#8634;&#8635;&#8636;&#8637;&#8638;&#8639;&#8640;&#8641;',           '&#8642;&#8643;&#8644;&#8645;&#8646;&#8647;&#8648;&#8649;&#8650;&#8651;&#8652;&#8653;',           '&#8654;&#8655;&#8656;&#8657;&#8658;&#8659;&#8660;&#8661;&#8662;&#8663;&#8664;&#8665;',           '&#8666;&#8667;&#8668;&#8669;&#8670;&#8671;&#8672;&#8673;&#8674;&#8675;&#8676;&#8677;',           '&#8678;&#8679;&#8680;&#8681;&#8691;&#8692;&#8693;&#8694;&#8695;&#8696;&#8697;&#8698;',           '&#8699;&#8700;&#8701;&#8702;&#8703;&#8704;&#8705;&#8706;&#8707;&#8708;&#8710;&#8711;',           '&#8712;&#8713;&#8714;&#8715;&#8716;&#8717;&#8719;&#8720;&#8721;&#8722;&#8723;&#8724;',           '&#8725;&#8726;&#8727;&#8728;&#8729;&#8730;&#8731;&#8732;&#8733;&#8739;&#8740;&#8741;',           '&#8742;&#8743;&#8744;&#8745;&#8746;&#8747;&#8748;&#8749;&#8750;&#8751;&#8752;&#8753;',           '&#8754;&#8755;&#8756;&#8757;&#8758;&#8759;&#8760;&#8761;&#8762;&#8763;&#8764;&#8765;',           '&#8766;&#8768;&#8769;&#8770;&#8771;&#8772;&#8773;&#8774;&#8775;&#8776;&#8777;&#8778;',           '&#8779;&#8780;&#8781;&#8782;&#8783;&#8784;&#8785;&#8786;&#8787;&#8788;&#8789;&#8790;',           '&#8791;&#8792;&#8793;&#8794;&#8795;&#8796;&#8797;&#8798;&#8799;&#8800;&#8801;&#8802;',           '&#8803;&#8804;&#8805;&#8806;&#8807;&#8808;&#8809;&#8810;&#8811;&#8812;&#8813;&#8814;',           '&#8815;&#8816;&#8817;&#8818;&#8819;&#8820;&#8821;&#8822;&#8823;&#8824;&#8825;&#8826;',           '&#8827;&#8828;&#8829;&#8830;&#8831;&#8832;&#8833;&#8834;&#8835;&#8836;&#8837;&#8838;',           '&#8839;&#8840;&#8841;&#8842;&#8843;&#8844;&#8845;&#8846;&#8847;&#8848;&#8849;&#8850;',           '&#8851;&#8852;&#8853;&#8854;&#8855;&#8856;&#8857;&#8858;&#8859;&#8860;&#8861;&#8862;',           '&#8863;&#8864;&#8865;&#8866;&#8867;&#8869;&#8870;&#8871;&#8872;&#8873;&#8874;&#8875;',           '&#8876;&#8877;&#8878;&#8879;&#8880;&#8881;&#8882;&#8883;&#8884;&#8885;&#8886;&#8887;',           '&#8888;&#8889;&#8890;&#8891;&#8892;&#8893;&#8896;&#8897;&#8898;&#8899;&#8900;&#8901;',           '&#8902;&#8903;&#8904;&#8905;&#8906;&#8907;&#8908;&#8909;&#8910;&#8911;&#8912;&#8913;',           '&#8914;&#8915;&#8916;&#8917;&#8918;&#8919;&#8920;&#8921;&#8922;&#8923;&#8924;&#8925;',           '&#8926;&#8927;&#8928;&#8929;&#8930;&#8931;&#8932;&#8933;&#8934;&#8935;&#8936;&#8937;',           '&#8938;&#8939;&#8940;&#8941;&#8942;&#8943;&#8944;&#8945;&#8946;&#8947;&#8948;&#8949;',           '&#8950;&#8951;&#8952;&#8953;&#8954;&#8955;&#8956;&#8957;&#8958;&#8959;&#8965;&#8966;',           '&#8968;&#8969;&#8970;&#8971;&#8988;&#8989;&#8990;&#8991;&#8994;&#8995;&#9001;&#9002;',           '&#9021;&#9023;&#9136;&#9137;&#9180;&#9181;&#9182;&#9183;&#9184;&#9474;&#9500;&#9508;',           '&#9516;&#9524;&#9601;&#9608;&#9618;&#9632;&#9633;&#9645;&#9650;&#9651;&#9652;&#9653;',           '&#9654;&#9655;&#9656;&#9657;&#9660;&#9661;&#9662;&#9663;&#9664;&#9665;&#9666;&#9667;',           '&#9668;&#9669;&#9674;&#9675;&#9702;&#9707;&#9708;&#9720;&#9721;&#9722;&#9723;&#9724;',           '&#9725;&#9726;&#9727;&#9733;&#9734;&#10098;&#10099;&#10193;&#10194;&#10195;&#10196;&#10197;',           '&#10198;&#10199;&#10200;&#10201;&#10202;&#10203;&#10204;&#10205;&#10206;&#10207;&#10208;&#10209;',           '&#10210;&#10211;&#10212;&#10213;&#10214;&#10215;&#10216;&#10217;&#10218;&#10219;&#10224;&#10225;',           '&#10226;&#10227;&#10228;&#10229;&#10230;&#10231;&#10232;&#10233;&#10234;&#10235;&#10236;&#10237;',           '&#10238;&#10239;&#10496;&#10497;&#10498;&#10499;&#10500;&#10501;&#10502;&#10503;&#10504;&#10505;',           '&#10506;&#10507;&#10508;&#10509;&#10510;&#10511;&#10512;&#10513;&#10514;&#10515;&#10516;&#10517;',           '&#10518;&#10519;&#10520;&#10521;&#10522;&#10523;&#10524;&#10525;&#10526;&#10527;&#10528;&#10529;',           '&#10530;&#10531;&#10532;&#10533;&#10534;&#10535;&#10536;&#10537;&#10538;&#10539;&#10540;&#10541;',           '&#10542;&#10543;&#10544;&#10545;&#10546;&#10547;&#10548;&#10549;&#10550;&#10551;&#10552;&#10553;',           '&#10554;&#10555;&#10556;&#10557;&#10558;&#10559;&#10560;&#10561;&#10562;&#10563;&#10564;&#10565;',           '&#10566;&#10567;&#10568;&#10569;&#10570;&#10571;&#10572;&#10573;&#10574;&#10575;&#10576;&#10577;',           '&#10578;&#10579;&#10580;&#10581;&#10582;&#10583;&#10584;&#10585;&#10586;&#10587;&#10588;&#10589;',           '&#10590;&#10591;&#10592;&#10593;&#10594;&#10595;&#10596;&#10597;&#10598;&#10599;&#10600;&#10601;',           '&#10602;&#10603;&#10604;&#10605;&#10606;&#10607;&#10608;&#10609;&#10610;&#10611;&#10612;&#10613;',           '&#10614;&#10615;&#10616;&#10617;&#10618;&#10619;&#10620;&#10621;&#10622;&#10623;&#10624;&#10626;',           '&#10627;&#10628;&#10629;&#10630;&#10631;&#10632;&#10633;&#10634;&#10635;&#10636;&#10637;&#10638;',           '&#10639;&#10640;&#10641;&#10642;&#10643;&#10644;&#10645;&#10646;&#10647;&#10648;&#10649;&#10650;',           '&#10678;&#10679;&#10680;&#10681;&#10688;&#10689;&#10692;&#10693;&#10694;&#10695;&#10696;&#10702;',           '&#10703;&#10704;&#10705;&#10706;&#10707;&#10708;&#10709;&#10710;&#10711;&#10712;&#10713;&#10714;',           '&#10715;&#10719;&#10721;&#10722;&#10723;&#10724;&#10725;&#10726;&#10731;&#10740;&#10741;&#10742;',           '&#10743;&#10744;&#10745;&#10746;&#10747;&#10748;&#10749;&#10750;&#10751;&#10752;&#10753;&#10754;',           '&#10755;&#10756;&#10757;&#10758;&#10759;&#10760;&#10761;&#10762;&#10763;&#10764;&#10765;&#10766;',           '&#10767;&#10768;&#10769;&#10770;&#10771;&#10772;&#10773;&#10774;&#10775;&#10776;&#10777;&#10778;',           '&#10779;&#10780;&#10781;&#10782;&#10783;&#10784;&#10785;&#10786;&#10787;&#10788;&#10789;&#10790;',           '&#10791;&#10792;&#10793;&#10794;&#10795;&#10796;&#10797;&#10798;&#10799;&#10800;&#10801;&#10802;',           '&#10803;&#10804;&#10805;&#10806;&#10807;&#10808;&#10809;&#10810;&#10811;&#10812;&#10813;&#10814;',           '&#10815;&#10816;&#10817;&#10818;&#10819;&#10820;&#10821;&#10822;&#10823;&#10824;&#10825;&#10826;',           '&#10827;&#10828;&#10829;&#10830;&#10831;&#10832;&#10833;&#10834;&#10835;&#10836;&#10837;&#10838;',           '&#10839;&#10840;&#10841;&#10842;&#10843;&#10844;&#10845;&#10846;&#10847;&#10848;&#10849;&#10850;',           '&#10851;&#10852;&#10853;&#10854;&#10855;&#10856;&#10857;&#10858;&#10859;&#10860;&#10861;&#10862;',           '&#10863;&#10864;&#10865;&#10866;&#10867;&#10868;&#10869;&#10870;&#10871;&#10872;&#10873;&#10874;',           '&#10875;&#10876;&#10877;&#10878;&#10879;&#10880;&#10881;&#10882;&#10883;&#10884;&#10885;&#10886;',           '&#10887;&#10888;&#10889;&#10890;&#10891;&#10892;&#10893;&#10894;&#10895;&#10896;&#10897;&#10898;',           '&#10899;&#10900;&#10901;&#10902;&#10903;&#10904;&#10905;&#10906;&#10907;&#10908;&#10909;&#10910;',           '&#10911;&#10912;&#10913;&#10914;&#10915;&#10916;&#10917;&#10918;&#10919;&#10920;&#10921;&#10922;',           '&#10923;&#10924;&#10925;&#10926;&#10927;&#10928;&#10929;&#10930;&#10931;&#10932;&#10933;&#10934;',           '&#10935;&#10936;&#10937;&#10938;&#10939;&#10940;&#10941;&#10942;&#10943;&#10944;&#10945;&#10946;',           '&#10947;&#10948;&#10949;&#10950;&#10951;&#10952;&#10953;&#10954;&#10955;&#10956;&#10957;&#10958;',           '&#10959;&#10960;&#10961;&#10962;&#10963;&#10964;&#10965;&#10966;&#10967;&#10968;&#10969;&#10970;',           '&#10971;&#10972;&#10973;&#10974;&#10975;&#10976;&#10978;&#10979;&#10980;&#10981;&#10982;&#10983;',           '&#10984;&#10985;&#10986;&#10987;&#10988;&#10989;&#10990;&#10991;&#10992;&#10994;&#10995;&#10996;',           '&#10997;&#10998;&#10999;&#11000;&#11001;&#11002;&#11003;&#11004;&#11005;&#11006;&#11007;&#11012;',           '&#11014;&#11015;&#11020;&#11021;&#12308;&#12309;&#12310;&#12311;&#12312;&#12313;&#65281;&#65286;',           '&#65288;&#65289;&#65291;&#65292;&#65293;&#65294;&#65295;&#65306;&#65307;&#65308;&#65309;&#65310;',           '&#65311;&#65312;&#65339;&#65340;&#65341;&#65342;&#65343;&#65371;&#65372;&#65373;')"/><xsl:variable name="sMinuses"><xsl:call-template name="SRepeatChar"><xsl:with-param name="cchRequired" select="string-length($sOperators)"/><xsl:with-param name="ch" select="'-'"/></xsl:call-template></xsl:variable><xsl:variable name="sNumbers" select="'0123456789'"/><xsl:variable name="sZeros"><xsl:call-template name="SRepeatChar"><xsl:with-param name="cchRequired" select="string-length($sNumbers)"/><xsl:with-param name="ch" select="'0'"/></xsl:call-template></xsl:variable><xsl:template name="SReplace"><xsl:param name="sInput"/><xsl:param name="sOrig"/><xsl:param name="sReplacement"/><xsl:choose><xsl:when test="not(contains($sInput, $sOrig))"><xsl:value-of select="$sInput"/></xsl:when><xsl:otherwise><xsl:variable name="sBefore" select="substring-before($sInput, $sOrig)"/><xsl:variable name="sAfter" select="substring-after($sInput, $sOrig)"/><xsl:variable name="sAfterProcessed"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAfter"/><xsl:with-param name="sOrig" select="$sOrig"/><xsl:with-param name="sReplacement" select="$sReplacement"/></xsl:call-template></xsl:variable><xsl:value-of select="concat($sBefore, concat($sReplacement, $sAfterProcessed))"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="/"><math><xsl:apply-templates select="*"/></math></xsl:template><xsl:template match="m:borderBox"><xsl:variable name="sLowerCaseHideTop" select="translate(m:borderBoxPr[last()]/m:hideTop[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseHideBot" select="translate(m:borderBoxPr[last()]/m:hideBot[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseHideLeft" select="translate(m:borderBoxPr[last()]/m:hideLeft[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseHideRight" select="translate(m:borderBoxPr[last()]/m:hideRight[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseStrikeH" select="translate(m:borderBoxPr[last()]/m:strikeH[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseStrikeV" select="translate(m:borderBoxPr[last()]/m:strikeV[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseStrikeBLTR" select="translate(m:borderBoxPr[last()]/m:strikeBLTR[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseStrikeTLBR" select="translate(m:borderBoxPr[last()]/m:strikeTLBR[last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="fHideTop"><xsl:choose><xsl:when test="$sLowerCaseHideTop='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fHideBot"><xsl:choose><xsl:when test="$sLowerCaseHideBot='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fHideLeft"><xsl:choose><xsl:when test="$sLowerCaseHideLeft='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fHideRight"><xsl:choose><xsl:when test="$sLowerCaseHideRight='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeH"><xsl:choose><xsl:when test="$sLowerCaseStrikeH='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeV"><xsl:choose><xsl:when test="$sLowerCaseStrikeV='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeBLTR"><xsl:choose><xsl:when test="$sLowerCaseStrikeBLTR='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeTLBR"><xsl:choose><xsl:when test="$sLowerCaseStrikeTLBR='on'"><xsl:text>1</xsl:text></xsl:when><xsl:otherwise><xsl:text>0</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><menclose><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideTop" select="$fHideTop"/><xsl:with-param name="fHideBot" select="$fHideBot"/><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/></xsl:call-template><xsl:apply-templates select="m:e[1]"/></menclose></xsl:template><xsl:template match="*"><xsl:apply-templates select="*"/></xsl:template><xsl:template match="m:acc"><mover><xsl:attribute name="accent">true</xsl:attribute><mrow><xsl:apply-templates select="m:e[1]"/></mrow><xsl:variable name="chAcc"><xsl:choose><xsl:when test="not(m:accPr[last()]/m:chr)"><xsl:value-of select="'&#770;'"/></xsl:when><xsl:otherwise><xsl:value-of select="substring(m:accPr/m:chr/@m:val,1,1)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="$chAcc"/><xsl:with-param name="scr" select="m:e[1]/*/m:rPr[last()]/m:scr/@m:val"/><xsl:with-param name="sty" select="m:e[1]/*/m:rPr[last()]/m:sty/@m:val"/><xsl:with-param name="nor" select="m:e[1]/*/m:rPr[last()]/m:nor/@m:val"/></xsl:call-template></mover></xsl:template><xsl:template match="m:sPre"><mmultiscripts><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mprescripts/><mrow><xsl:apply-templates select="m:sub[1]"/></mrow><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></mmultiscripts></xsl:template><xsl:template match="m:m"><mtable><xsl:call-template name="CreateMathMLMatrixAttr"><xsl:with-param name="mcJc" select="m:mPr[last()]/m:mcs/m:mc/m:mcPr[last()]/m:mcJc/@m:val"/></xsl:call-template><xsl:for-each select="m:mr"><mtr><xsl:for-each select="m:e"><mtd><xsl:apply-templates select="."/></mtd></xsl:for-each></mtr></xsl:for-each></mtable></xsl:template><xsl:template name="CreateMathMLMatrixAttr"><xsl:param name="mcJc"/><xsl:variable name="sLowerCaseMcjc" select="translate($mcJc, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                 'abcdefghijklmnopqrstuvwxyz')"/><xsl:choose><xsl:when test="$sLowerCaseMcjc='left'"><xsl:attribute name="columnalign">left</xsl:attribute></xsl:when><xsl:when test="$sLowerCaseMcjc='right'"><xsl:attribute name="columnalign">right</xsl:attribute></xsl:when></xsl:choose></xsl:template><xsl:template match="m:phant"><xsl:variable name="sLowerCaseZeroWidVal" select="translate(m:phantPr[last()]/m:zeroWid[last()]/@m:val,                                                           'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                           'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseZeroAscVal" select="translate(m:phantPr[last()]/m:zeroAsc[last()]/@m:val,                                                         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                         'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseZeroDescVal" select="translate(m:phantPr[last()]/m:zeroDesc[last()]/@m:val,                                                         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                         'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseShowVal" select="translate(m:phantPr[last()]/m:show[last()]/@m:val,                                                         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                         'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="fZeroWid"><xsl:choose><xsl:when test="count(m:phantPr[last()]/m:zeroWid[last()]) = 0">0</xsl:when><xsl:when test="$sLowerCaseZeroWidVal = 'off'">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fZeroAsc"><xsl:choose><xsl:when test="count(m:phantPr[last()]/m:zeroAsc[last()]) = 0">0</xsl:when><xsl:when test="$sLowerCaseZeroAscVal = 'off'">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fZeroDesc"><xsl:choose><xsl:when test="count(m:phantPr[last()]/m:zeroDesc[last()]) = 0">0</xsl:when><xsl:when test="$sLowerCaseZeroDescVal = 'off'">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fShow"><xsl:choose><xsl:when test="$sLowerCaseShowVal = 'off'">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fShow = 1"><xsl:element name="mpadded"><xsl:call-template name="CreateMpaddedAttributes"><xsl:with-param name="fZeroWid" select="$fZeroWid"/><xsl:with-param name="fZeroAsc" select="$fZeroAsc"/><xsl:with-param name="fZeroDesc" select="$fZeroDesc"/></xsl:call-template><mrow><xsl:apply-templates select="m:e"/></mrow></xsl:element></xsl:when><xsl:when test="$fZeroWid=0 and $fZeroAsc=0 and $fZeroDesc=0"><xsl:element name="mphantom"><mrow><xsl:apply-templates select="m:e"/></mrow></xsl:element></xsl:when><xsl:otherwise><xsl:element name="mphantom"><xsl:element name="mpadded"><xsl:call-template name="CreateMpaddedAttributes"><xsl:with-param name="fZeroWid" select="$fZeroWid"/><xsl:with-param name="fZeroAsc" select="$fZeroAsc"/><xsl:with-param name="fZeroDesc" select="$fZeroDesc"/></xsl:call-template><mrow><xsl:apply-templates select="m:e"/></mrow></xsl:element></xsl:element></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateMpaddedAttributes"><xsl:param name="fZeroWid"/><xsl:param name="fZeroAsc"/><xsl:param name="fZeroDesc"/><xsl:if test="$fZeroWid=1"><xsl:attribute name="width">0</xsl:attribute></xsl:if><xsl:if test="$fZeroAsc=1"><xsl:attribute name="height">0</xsl:attribute></xsl:if><xsl:if test="$fZeroDesc=1"><xsl:attribute name="depth">0</xsl:attribute></xsl:if></xsl:template><xsl:template match="m:rad"><xsl:variable name="sLowerCaseDegHide" select="translate(m:radPr[last()]/m:degHide/@m:val,                                                              'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                              'abcdefghijklmnopqrstuvwxyz')"/><xsl:choose><xsl:when test="$sLowerCaseDegHide='on'"><msqrt><xsl:apply-templates select="m:e[1]"/></msqrt></xsl:when><xsl:otherwise><mroot><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:deg[1]"/></mrow></mroot></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:nary"><xsl:variable name="sLowerCaseSubHide"><xsl:choose><xsl:when test="count(m:naryPr[last()]/m:subHide) = 0"><xsl:text>off</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="translate(m:naryPr[last()]/m:subHide/@m:val,                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                     'abcdefghijklmnopqrstuvwxyz')"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseSupHide"><xsl:choose><xsl:when test="count(m:naryPr[last()]/m:supHide) = 0"><xsl:text>off</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="translate(m:naryPr[last()]/m:supHide/@m:val,                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                     'abcdefghijklmnopqrstuvwxyz')"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseLimLoc"><xsl:value-of select="translate(m:naryPr[last()]/m:limLoc/@m:val,                                     'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                     'abcdefghijklmnopqrstuvwxyz')"/></xsl:variable><xsl:variable name="fLimLocSubSup"><xsl:choose><xsl:when test="count(m:naryPr[last()]/m:limLoc)=0 or $sLowerCaseLimLoc='subsup'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="not($sLowerCaseSupHide='off') and                     not($sLowerCaseSubHide='off')"><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo></xsl:when><xsl:when test="not($sLowerCaseSubHide='off')"><xsl:choose><xsl:when test="$fLimLocSubSup=1"><msup><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></msup></xsl:when><xsl:otherwise><mover><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></mover></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="not($sLowerCaseSupHide='off')"><xsl:choose><xsl:when test="$fLimLocSubSup=1"><msub><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sub[1]"/></mrow></msub></xsl:when><xsl:otherwise><munder><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sub[1]"/></mrow></munder></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$fLimLocSubSup=1"><msubsup><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sub[1]"/></mrow><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></msubsup></xsl:when><xsl:otherwise><munderover><mo><xsl:choose><xsl:when test="not(m:naryPr[last()]/m:chr/@m:val) or                                            m:naryPr[last()]/m:chr/@m:val=''"><xsl:text>&#8747;</xsl:text></xsl:when><xsl:otherwise><xsl:value-of select="m:naryPr[last()]/m:chr/@m:val"/></xsl:otherwise></xsl:choose></mo><mrow><xsl:apply-templates select="m:sub[1]"/></mrow><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></munderover></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose><mrow><xsl:apply-templates select="m:e[1]"/></mrow></xsl:template><xsl:template match="m:limLow"><munder><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:lim[1]"/></mrow></munder></xsl:template><xsl:template match="m:limUpp"><mover><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:lim[1]"/></mrow></mover></xsl:template><xsl:template match="m:sSub"><msub><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:sub[1]"/></mrow></msub></xsl:template><xsl:template match="m:sSup"><msup><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></msup></xsl:template><xsl:template match="m:sSubSup"><msubsup><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mrow><xsl:apply-templates select="m:sub[1]"/></mrow><mrow><xsl:apply-templates select="m:sup[1]"/></mrow></msubsup></xsl:template><xsl:template match="m:groupChr"><xsl:variable name="ndLastGroupChrPr" select="m:groupChrPr[last()]"/><xsl:variable name="sLowerCasePos" select="translate($ndLastGroupChrPr/m:pos/@m:val,                                                         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                         'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseVertJc" select="translate($ndLastGroupChrPr/m:vertJc/@m:val,                                                         'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                         'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="ndLastChr" select="$ndLastGroupChrPr/m:chr"/><xsl:variable name="chr"><xsl:choose><xsl:when test="$ndLastChr and (not($ndLastChr/@m:val) or string-length($ndLastChr/@m:val) = 0)"/><xsl:when test="string-length($ndLastChr/@m:val) &gt;= 1"><xsl:value-of select="substring($ndLastChr/@m:val,1,1)"/></xsl:when><xsl:otherwise><xsl:text>&amp;#x023DF;</xsl:text></xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$sLowerCasePos = 'top'"><xsl:choose><xsl:when test="$sLowerCaseVertJc = 'bot'"><mover accent="false"><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mo><xsl:value-of disable-output-escaping="yes" select="$chr"/></mo></mover></xsl:when><xsl:otherwise><munder accentunder="false"><mo><xsl:value-of disable-output-escaping="yes" select="$chr"/></mo><mrow><xsl:apply-templates select="m:e[1]"/></mrow></munder></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$sLowerCaseVertJc = 'bot'"><mover accent="false"><mo><xsl:value-of disable-output-escaping="yes" select="$chr"/></mo><mrow><xsl:apply-templates select="m:e[1]"/></mrow></mover></xsl:when><xsl:otherwise><munder accentunder="false"><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mo><xsl:value-of disable-output-escaping="yes" select="$chr"/></mo></munder></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="fName"><xsl:for-each select="m:fName/*"><xsl:apply-templates select="."/></xsl:for-each></xsl:template><xsl:template match="m:func"><mrow><mrow><xsl:call-template name="fName"/></mrow><mo>&#8289;</mo><mrow><xsl:apply-templates select="m:e"/></mrow></mrow></xsl:template><xsl:template match="m:f"><xsl:variable name="sLowerCaseType" select="translate(m:fPr[last()]/m:type/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/><xsl:choose><xsl:when test="$sLowerCaseType='lin'"><mrow><mrow><xsl:apply-templates select="m:num[1]"/></mrow><mo>/</mo><mrow><xsl:apply-templates select="m:den[1]"/></mrow></mrow></xsl:when><xsl:otherwise><mfrac><xsl:call-template name="CreateMathMLFracProp"><xsl:with-param name="type" select="$sLowerCaseType"/></xsl:call-template><mrow><xsl:apply-templates select="m:num[1]"/></mrow><mrow><xsl:apply-templates select="m:den[1]"/></mrow></mfrac></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateMathMLFracProp"><xsl:param name="type"/><xsl:variable name="sLowerCaseType" select="translate($type, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ', 'abcdefghijklmnopqrstuvwxyz')"/><xsl:if test="$sLowerCaseType='skw' or $sLowerCaseType='lin'"><xsl:attribute name="bevelled">true</xsl:attribute></xsl:if><xsl:if test="$sLowerCaseType='nobar'"><xsl:attribute name="linethickness">0pt</xsl:attribute></xsl:if><xsl:choose><xsl:when test="sLowerCaseNumJc='right'"><xsl:attribute name="numalign">right</xsl:attribute></xsl:when><xsl:when test="sLowerCaseNumJc='left'"><xsl:attribute name="numalign">left</xsl:attribute></xsl:when></xsl:choose><xsl:choose><xsl:when test="sLowerCaseDenJc='right'"><xsl:attribute name="numalign">right</xsl:attribute></xsl:when><xsl:when test="sLowerCaseDenJc='left'"><xsl:attribute name="numalign">left</xsl:attribute></xsl:when></xsl:choose></xsl:template><xsl:template match="m:e | m:den | m:num | m:lim | m:sup | m:sub"><xsl:choose><xsl:when test="not(m:argPr[last()]/m:scrLvl/@m:val)"><xsl:apply-templates select="*"/></xsl:when><xsl:otherwise><mstyle><xsl:attribute name="scriptlevel"><xsl:value-of select="m:argPr[last()]/m:scrLvl/@m:val"/></xsl:attribute><xsl:apply-templates select="*"/></mstyle></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:bar"><xsl:variable name="sLowerCasePos" select="translate(m:barPr/m:pos/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                           'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="fTop"><xsl:choose><xsl:when test="$sLowerCasePos='top'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fTop=1"><mover><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mo><xsl:text>&#175;</xsl:text></mo></mover></xsl:when><xsl:otherwise><munder><mrow><xsl:apply-templates select="m:e[1]"/></mrow><mo><xsl:text>&#818;</xsl:text></mo></munder></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:d"><mfenced><xsl:if test="m:dPr[1]/m:begChr/@m:val and not(m:dPr[1]/m:begChr/@m:val ='(')"><xsl:attribute name="open"><xsl:value-of select="m:dPr[1]/m:begChr/@m:val"/></xsl:attribute></xsl:if><xsl:if test="m:dPr[1]/m:endChr/@m:val and not(m:dPr[1]/m:endChr/@m:val =')')"><xsl:attribute name="close"><xsl:value-of select="m:dPr[1]/m:endChr/@m:val"/></xsl:attribute></xsl:if><xsl:choose><xsl:when test="m:dPr[1]/m:sepChr/@m:val = ','"/><xsl:when test="not(m:dPr[1]/m:sepChr/@m:val)"><xsl:attribute name="separators"><xsl:value-of select="'|'"/></xsl:attribute></xsl:when><xsl:otherwise><xsl:attribute name="separators"><xsl:value-of select="m:dPr[1]/m:sepChr/@m:val"/></xsl:attribute></xsl:otherwise></xsl:choose><xsl:for-each select="m:e"><mrow><xsl:apply-templates select="."/></mrow></xsl:for-each></mfenced></xsl:template><xsl:template match="m:r"><xsl:variable name="sLowerCaseNor" select="translate(child::m:rPr[last()]/m:nor/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                           'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="sLowerCaseLit" select="translate(child::m:rPr[child::m:lit][last()]/@m:val, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                                           'abcdefghijklmnopqrstuvwxyz')"/><xsl:variable name="fNor"><xsl:choose><xsl:when test="$sLowerCaseNor='off' or count(child::m:rPr[last()]/m:nor) = 0">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fLit"><xsl:choose><xsl:when test="not(child::m:rPr[child::m:lit][last()]) or $sLowerCaseLit='off'">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fNor=1"><xsl:choose><xsl:when test="$fLit=1"><maction actiontype="lit"><mtext><xsl:call-template name="checkDirectFormatting"/><xsl:value-of select=".//m:t"/></mtext></maction></xsl:when><xsl:otherwise><mtext><xsl:call-template name="checkDirectFormatting"/><xsl:value-of select=".//m:t"/></mtext></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$fLit=1"><maction actiontype="lit"><xsl:for-each select=".//m:t"><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="text()"/><xsl:with-param name="scr" select="../m:rPr[last()]/m:scr/@m:val"/><xsl:with-param name="sty" select="../m:rPr[last()]/m:sty/@m:val"/><xsl:with-param name="nor" select="../m:rPr[last()]/m:nor/@m:val"/></xsl:call-template></xsl:for-each></maction></xsl:when><xsl:otherwise><xsl:for-each select=".//m:t"><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="text()"/><xsl:with-param name="scr" select="../m:rPr[last()]/m:scr/@m:val"/><xsl:with-param name="sty" select="../m:rPr[last()]/m:sty/@m:val"/><xsl:with-param name="nor" select="../m:rPr[last()]/m:nor/@m:val"/></xsl:call-template></xsl:for-each></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateTokenAttributes"><xsl:param name="scr"/><xsl:param name="sty"/><xsl:param name="nor"/><xsl:param name="nCharToPrint"/><xsl:param name="sTokenType"/><xsl:variable name="sLowerCaseNor" select="translate($nor, 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',                                                               'abcdefghijklmnopqrstuvwxyz')"/><xsl:choose><xsl:when test="$sLowerCaseNor = 'on'"><xsl:attribute name="mathvariant">normal</xsl:attribute></xsl:when><xsl:otherwise><xsl:variable name="mathvariant"><xsl:choose><xsl:when test="$sTokenType='mn'"/><xsl:when test="$scr='monospace'">monospace</xsl:when><xsl:when test="$scr='sans-serif' and $sty='i'">sans-serif-italic</xsl:when><xsl:when test="$scr='sans-serif' and $sty='b'">bold-sans-serif</xsl:when><xsl:when test="$scr='sans-serif' and $sty='bi'">sans-serif-bold-italic</xsl:when><xsl:when test="$scr='sans-serif'">sans-serif</xsl:when><xsl:when test="$scr='fraktur' and $sty='b'">bold-fraktur</xsl:when><xsl:when test="$scr='fraktur'">fraktur</xsl:when><xsl:when test="$scr='double-struck'">double-struck</xsl:when><xsl:when test="$scr='script' and $sty='b'">bold-script</xsl:when><xsl:when test="$scr='script'">script</xsl:when><xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='b'">bold</xsl:when><xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='i'">italic</xsl:when><xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='p'">normal</xsl:when><xsl:when test="($scr='roman' or not($scr) or $scr='') and $sty='bi'">bold-italic</xsl:when><xsl:otherwise/></xsl:choose></xsl:variable><xsl:variable name="fontweight"><xsl:choose><xsl:when test="$sty='b' or $sty='bi'">bold</xsl:when><xsl:otherwise>normal</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fontstyle"><xsl:choose><xsl:when test="$sty='p' or $sty='b'">normal</xsl:when><xsl:otherwise>italic</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$sTokenType='mo' and $mathvariant!='normal'"/><xsl:when test="$sTokenType='mi' and $nCharToPrint=1 and ($mathvariant='' or $mathvariant='italic')"/><xsl:when test="$sTokenType='mi' and $nCharToPrint &gt; 1 and ($mathvariant='' or $mathvariant='italic')"><xsl:attribute name="mathvariant"><xsl:value-of select="'italic'"/></xsl:attribute></xsl:when><xsl:when test="$mathvariant!='italic' and $mathvariant!=''"><xsl:attribute name="mathvariant"><xsl:value-of select="$mathvariant"/></xsl:attribute></xsl:when><xsl:otherwise><xsl:if test="not($sTokenType='mi' and $nCharToPrint=1) and $fontstyle='italic'"><xsl:attribute name="fontstyle">italic</xsl:attribute></xsl:if><xsl:if test="$fontweight='bold'"><xsl:attribute name="fontweight">bold</xsl:attribute></xsl:if></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template match="m:eqArr"><mtable><xsl:for-each select="m:e"><mtr><mtd><xsl:choose><xsl:when test="m:argPr[last()]/m:scrLvl/@m:val!='0' or                   not(m:argPr[last()]/m:scrLvl/@m:val)  or                   m:argPr[last()]/m:scrLvl/@m:val=''"><mrow><maligngroup/><xsl:call-template name="CreateEqArrRow"><xsl:with-param name="align" select="1"/><xsl:with-param name="ndCur" select="*[1]"/></xsl:call-template></mrow></xsl:when><xsl:otherwise><mstyle><xsl:attribute name="scriptlevel"><xsl:value-of select="m:argPr[last()]/m:scrLvl/@m:val"/></xsl:attribute><maligngroup/><xsl:call-template name="CreateEqArrRow"><xsl:with-param name="align" select="1"/><xsl:with-param name="ndCur" select="*[1]"/></xsl:call-template></mstyle></xsl:otherwise></xsl:choose></mtd></mtr></xsl:for-each></mtable></xsl:template><xsl:template name="CreateEqArrRow"><xsl:param name="align"/><xsl:param name="ndCur"/><xsl:variable name="sAllMt"><xsl:for-each select="$ndCur/m:t"><xsl:value-of select="."/></xsl:for-each></xsl:variable><xsl:choose><xsl:when test="$ndCur/self::m:r"><xsl:call-template name="ParseEqArrMr"><xsl:with-param name="sToParse" select="$sAllMt"/><xsl:with-param name="scr" select="../m:rPr[last()]/m:scr/@m:val"/><xsl:with-param name="sty" select="../m:rPr[last()]/m:sty/@m:val"/><xsl:with-param name="nor" select="../m:rPr[last()]/m:nor/@m:val"/><xsl:with-param name="align" select="$align"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:apply-templates select="$ndCur"/></xsl:otherwise></xsl:choose><xsl:if test="count($ndCur/following-sibling::*) &gt; 0"><xsl:variable name="cAmp"><xsl:call-template name="CountAmp"><xsl:with-param name="sAllMt" select="$sAllMt"/><xsl:with-param name="cAmp" select="0"/></xsl:call-template></xsl:variable><xsl:call-template name="CreateEqArrRow"><xsl:with-param name="align" select="($align+($cAmp mod 2)) mod 2"/><xsl:with-param name="ndCur" select="$ndCur/following-sibling::*[1]"/></xsl:call-template></xsl:if></xsl:template><xsl:template name="CountAmp"><xsl:param name="sAllMt"/><xsl:param name="cAmp"/><xsl:choose><xsl:when test="string-length(substring-after($sAllMt, '&amp;')) &gt; 0 or                     substring($sAllMt, string-length($sAllMt))='&amp;'"><xsl:call-template name="CountAmp"><xsl:with-param name="sAllMt" select="substring-after($sAllMt, '&amp;')"/><xsl:with-param name="cAmp" select="$cAmp+1"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="$cAmp"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ParseEqArrMr"><xsl:param name="sToParse"/><xsl:param name="sty"/><xsl:param name="scr"/><xsl:param name="nor"/><xsl:param name="align"/><xsl:if test="string-length($sToParse) &gt; 0"><xsl:choose><xsl:when test="substring($sToParse,1,1) = '&amp;'"><xsl:choose><xsl:when test="$align=0"><maligngroup/></xsl:when><xsl:when test="$align=1"><malignmark/></xsl:when></xsl:choose><xsl:call-template name="ParseEqArrMr"><xsl:with-param name="sToParse" select="substring($sToParse,2)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="align"><xsl:choose><xsl:when test="$align=1">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="sRepNumWith0"><xsl:call-template name="SReplaceNumWithZero"><xsl:with-param name="sToParse" select="$sToParse"/></xsl:call-template></xsl:variable><xsl:variable name="sRepOperWith-"><xsl:call-template name="SReplaceOperWithMinus"><xsl:with-param name="sToParse" select="$sRepNumWith0"/></xsl:call-template></xsl:variable><xsl:variable name="iFirstOper" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '-'))"/><xsl:variable name="iFirstNum" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '0'))"/><xsl:variable name="iFirstAmp" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '&amp;'))"/><xsl:variable name="fNumAtPos1"><xsl:choose><xsl:when test="substring($sRepOperWith-,1,1)='0'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fOperAtPos1"><xsl:choose><xsl:when test="substring($sRepOperWith-,1,1)='-'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fNumAtPos1='0' and $fOperAtPos1='0'"><mi><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="nCharToPrint" select="1"/><xsl:with-param name="sTokenType" select="'mi'"/></xsl:call-template><xsl:value-of select="substring($sToParse,1,1)"/></mi><xsl:call-template name="ParseEqArrMr"><xsl:with-param name="sToParse" select="substring($sToParse, 2)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="align" select="$align"/></xsl:call-template></xsl:when><xsl:when test="$fOperAtPos1='1'"><mo><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr"/><xsl:with-param name="sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="sTokenType" select="'mo'"/></xsl:call-template><xsl:value-of select="substring($sToParse,1,1)"/></mo><xsl:call-template name="ParseEqArrMr"><xsl:with-param name="sToParse" select="substring($sToParse, 2)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="align" select="$align"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="sConsecNum"><xsl:call-template name="SNumStart"><xsl:with-param name="sToParse" select="$sToParse"/><xsl:with-param name="sPattern" select="$sRepNumWith0"/></xsl:call-template></xsl:variable><mn><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr"/><xsl:with-param name="sty" select="'p'"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="sTokenType" select="'mn'"/></xsl:call-template><xsl:value-of select="$sConsecNum"/></mn><xsl:call-template name="ParseEqArrMr"><xsl:with-param name="sToParse" select="substring-after($sToParse, $sConsecNum)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="align" select="$align"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="ParseMt"><xsl:param name="sToParse"/><xsl:param name="sty"/><xsl:param name="scr"/><xsl:param name="nor"/><xsl:if test="string-length($sToParse) &gt; 0"><xsl:variable name="sRepNumWith0"><xsl:call-template name="SReplaceNumWithZero"><xsl:with-param name="sToParse" select="$sToParse"/></xsl:call-template></xsl:variable><xsl:variable name="sRepOperWith-"><xsl:call-template name="SReplaceOperWithMinus"><xsl:with-param name="sToParse" select="$sRepNumWith0"/></xsl:call-template></xsl:variable><xsl:variable name="iFirstOper" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '-'))"/><xsl:variable name="iFirstNum" select="string-length($sRepOperWith-) - string-length(substring-after($sRepOperWith-, '0'))"/><xsl:variable name="fNumAtPos1"><xsl:choose><xsl:when test="substring($sRepOperWith-,1,1)='0'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fOperAtPos1"><xsl:choose><xsl:when test="substring($sRepOperWith-,1,1)='-'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fOperAtPos1='0' and $fNumAtPos1='0'"><xsl:variable name="nCharToPrint"><xsl:choose><xsl:when test="ancestor::m:fName"><xsl:choose><xsl:when test="($iFirstOper=$iFirstNum) and             ($iFirstOper=string-length($sToParse)) and                        (substring($sRepOperWith-, string-length($sRepOperWith-))!='0') and                         (substring($sRepOperWith-, string-length($sRepOperWith-))!='-')"><xsl:value-of select="string-length($sToParse)"/></xsl:when><xsl:when test="$iFirstOper &lt; $iFirstNum"><xsl:value-of select="$iFirstOper - 1"/></xsl:when><xsl:otherwise><xsl:value-of select="$iFirstNum - 1"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:variable><mi><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="nCharToPrint" select="$nCharToPrint"/><xsl:with-param name="sTokenType" select="'mi'"/></xsl:call-template><xsl:value-of select="substring($sToParse, 1, $nCharToPrint)"/></mi><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="substring($sToParse, $nCharToPrint+1)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/></xsl:call-template></xsl:when><xsl:when test="$fOperAtPos1='1'"><mo><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr"/><xsl:with-param name="sty"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="sTokenType" select="'mo'"/></xsl:call-template><xsl:value-of select="substring($sToParse,1,1)"/></mo><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="substring($sToParse, 2)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="sConsecNum"><xsl:call-template name="SNumStart"><xsl:with-param name="sToParse" select="$sToParse"/><xsl:with-param name="sPattern" select="$sRepNumWith0"/></xsl:call-template></xsl:variable><mn><xsl:call-template name="CreateTokenAttributes"><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="'p'"/><xsl:with-param name="nor" select="$nor"/><xsl:with-param name="sTokenType" select="'mn'"/></xsl:call-template><xsl:value-of select="$sConsecNum"/></mn><xsl:call-template name="ParseMt"><xsl:with-param name="sToParse" select="substring-after($sToParse, $sConsecNum)"/><xsl:with-param name="scr" select="$scr"/><xsl:with-param name="sty" select="$sty"/><xsl:with-param name="nor" select="$nor"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="SNumStart"><xsl:param name="sToParse" select="''"/><xsl:param name="sPattern" select="'$sToParse'"/><xsl:choose><xsl:when test="substring($sPattern, 1, 1) = '0'"><xsl:call-template name="SNumStart"><xsl:with-param name="sToParse" select="$sToParse"/><xsl:with-param name="sPattern" select="substring($sPattern, 2)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="substring($sToParse, 1, string-length($sToParse) - string-length($sPattern))"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="SRepeatCharAcc"><xsl:param name="cchRequired" select="1"/><xsl:param name="ch" select="'-'"/><xsl:param name="acc" select="$ch"/><xsl:variable name="cchAcc" select="string-length($acc)"/><xsl:choose><xsl:when test="(2 * $cchAcc) &lt; $cchRequired"><xsl:call-template name="SRepeatCharAcc"><xsl:with-param name="cchRequired" select="$cchRequired"/><xsl:with-param name="ch" select="$ch"/><xsl:with-param name="acc" select="concat($acc, $acc)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="concat($acc, substring($acc, 1, $cchRequired - $cchAcc))"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="SRepeatChar"><xsl:param name="cchRequired" select="1"/><xsl:param name="ch" select="'-'"/><xsl:call-template name="SRepeatCharAcc"><xsl:with-param name="cchRequired" select="$cchRequired"/><xsl:with-param name="ch" select="$ch"/><xsl:with-param name="acc" select="$ch"/></xsl:call-template></xsl:template><xsl:template name="SReplaceOperWithMinus"><xsl:param name="sToParse" select="''"/><xsl:value-of select="translate($sToParse, $sOperators, $sMinuses)"/></xsl:template><xsl:template name="SReplaceNumWithZero"><xsl:param name="sToParse" select="''"/><xsl:variable name="sSimpleReplace" select="translate($sToParse, $sNumbers, $sZeros)"/><xsl:variable name="sReplacePeriod"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sSimpleReplace"/><xsl:with-param name="sOrig" select="'0.0'"/><xsl:with-param name="sReplacement" select="'000'"/></xsl:call-template></xsl:variable><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sReplacePeriod"/><xsl:with-param name="sOrig" select="'0,0'"/><xsl:with-param name="sReplacement" select="'000'"/></xsl:call-template></xsl:template><xsl:template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:param name="fHideTop"/><xsl:param name="fHideBot"/><xsl:param name="fHideLeft"/><xsl:param name="fHideRight"/><xsl:param name="fStrikeH"/><xsl:param name="fStrikeV"/><xsl:param name="fStrikeBLTR"/><xsl:param name="fStrikeTLBR"/><xsl:param name="sAttribute"/><xsl:choose><xsl:when test="string-length($sAttribute) = 0"><xsl:choose><xsl:when test="string-length($fHideTop) &gt; 0                       and string-length($fHideBot) &gt; 0                        and string-length($fHideLeft) &gt; 0                       and string-length($fHideRight) &gt; 0"><xsl:choose><xsl:when test="$fHideTop = 0                                and $fHideBot = 0                               and $fHideLeft = 0                                and $fHideRight = 0"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:text>box</xsl:text></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideTop" select="$fHideTop"/><xsl:with-param name="fHideBot" select="$fHideBot"/><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:text>left right top bottom</xsl:text></xsl:with-param></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="string-length($fHideTop) &gt; 0"><xsl:choose><xsl:when test="$fHideTop=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideBot" select="$fHideBot"/><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAttribute"/><xsl:with-param name="sOrig" select="'top'"/><xsl:with-param name="sReplacement" select="''"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideBot" select="$fHideBot"/><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fHideBot) &gt; 0"><xsl:choose><xsl:when test="$fHideBot=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAttribute"/><xsl:with-param name="sOrig" select="'bottom'"/><xsl:with-param name="sReplacement" select="''"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideLeft" select="$fHideLeft"/><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fHideLeft) &gt; 0"><xsl:choose><xsl:when test="$fHideLeft=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAttribute"/><xsl:with-param name="sOrig" select="'left'"/><xsl:with-param name="sReplacement" select="''"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fHideRight" select="$fHideRight"/><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fHideRight) &gt; 0"><xsl:choose><xsl:when test="$fHideRight=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAttribute"/><xsl:with-param name="sOrig" select="'right'"/><xsl:with-param name="sReplacement" select="''"/></xsl:call-template></xsl:with-param></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeH" select="$fStrikeH"/><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fStrikeH) &gt; 0"><xsl:choose><xsl:when test="$fStrikeH=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="concat($sAttribute, ' horizontalstrike')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeV" select="$fStrikeV"/><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fStrikeV) &gt; 0"><xsl:choose><xsl:when test="$fStrikeV=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="concat($sAttribute, ' verticalstrike')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeBLTR" select="$fStrikeBLTR"/><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fStrikeBLTR) &gt; 0"><xsl:choose><xsl:when test="$fStrikeBLTR=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="concat($sAttribute, ' updiagonalstrike')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="fStrikeTLBR" select="$fStrikeTLBR"/><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="string-length($fStrikeTLBR) &gt; 0"><xsl:choose><xsl:when test="$fStrikeTLBR=1"><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="sAttribute" select="concat($sAttribute, ' downdiagonalstrike')"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreateMencloseNotationAttrFromBorderBoxAttr"><xsl:with-param name="sAttribute" select="$sAttribute"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:attribute name="notation"><xsl:value-of select="normalize-space($sAttribute)"/></xsl:attribute></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="checkDirectFormatting"><xsl:if test="w:rPr/w:rFonts/@w:ascii and not(w:rPr/w:rFonts/@w:ascii='Cambria Math')"><xsl:attribute name="fontfamily" select="w:rPr/w:rFonts/@w:ascii"/></xsl:if><xsl:choose><xsl:when test="w:rPr/w:b[not(@w:val='0')]"><xsl:attribute name="fontweight">bold</xsl:attribute></xsl:when><xsl:when test="w:rPr/w:b[@w:val='0']"><xsl:attribute name="fontweight">normal</xsl:attribute></xsl:when></xsl:choose><xsl:choose><xsl:when test="w:rPr/w:i[not(@w:val='0')]"><xsl:attribute name="fontstyle">italic</xsl:attribute></xsl:when><xsl:when test="w:rPr/w:i[@w:val='0']"><xsl:attribute name="fontstyle">upright</xsl:attribute></xsl:when></xsl:choose></xsl:template></xsl:stylesheet>