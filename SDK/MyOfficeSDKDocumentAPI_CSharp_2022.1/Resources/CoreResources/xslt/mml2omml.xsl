<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:w="http://schemas.openxmlformats.org/wordprocessingml/2006/main" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:mml="http://www.w3.org/1998/Math/MathML" xmlns="http://schemas.openxmlformats.org/officeDocument/2006/math" xmlns:m="http://schemas.openxmlformats.org/officeDocument/2006/math" exclude-result-prefixes="mml" version="2.0"><xsl:output method="xml" encoding="UTF-8"/><xsl:param name="pFontSize" select="22"/><xsl:variable name="StrUCAlphabet">ABCDEFGHIJKLMNOPQRSTUVWXYZ</xsl:variable><xsl:variable name="StrLCAlphabet">abcdefghijklmnopqrstuvwxyz</xsl:variable><xsl:template match="/"><m:oMath><xsl:apply-templates mode="mml"/></m:oMath></xsl:template><xsl:template name="SReplace"><xsl:param name="sInput"/><xsl:param name="sOrig"/><xsl:param name="sReplacement"/><xsl:choose><xsl:when test="not(contains($sInput, $sOrig))"><xsl:value-of select="$sInput"/></xsl:when><xsl:otherwise><xsl:variable name="sBefore" select="substring-before($sInput, $sOrig)"/><xsl:variable name="sAfter" select="substring-after($sInput, $sOrig)"/><xsl:variable name="sAfterProcessed"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sAfter"/><xsl:with-param name="sOrig" select="$sOrig"/><xsl:with-param name="sReplacement" select="$sReplacement"/></xsl:call-template></xsl:variable><xsl:value-of select="concat($sBefore, concat($sReplacement, $sAfterProcessed))"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="OutputText"><xsl:param name="sInput"/><xsl:variable name="sCharStrip"><xsl:value-of select="translate($sInput, '&#8290;&#8203;', '')"/></xsl:variable><xsl:variable name="sCharReplace"><xsl:call-template name="SReplace"><xsl:with-param name="sInput" select="$sCharStrip"/><xsl:with-param name="sOrig" select="'&#10869;'"/><xsl:with-param name="sReplacement" select="'=='"/></xsl:call-template></xsl:variable><xsl:value-of select="$sCharReplace"/></xsl:template><xsl:template name="FNonGlyphToken"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="$ndCur/self::mml:mi[not(child::mml:mglyph)] |                        $ndCur/self::mml:mn[not(child::mml:mglyph)] |                        $ndCur/self::mml:mo[not(child::mml:mglyph)] |                        $ndCur/self::mml:ms[not(child::mml:mglyph)] |                        $ndCur/self::mml:mtext[not(child::mml:mglyph)]">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FStartOfRun"><xsl:param name="ndCur" select="."/><xsl:variable name="fPrecSibNonGlyphToken"><xsl:call-template name="FNonGlyphToken"><xsl:with-param name="ndCur" select="$ndCur/preceding-sibling::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="count($ndCur/preceding-sibling::*)=0             or $fPrecSibNonGlyphToken=0">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIsNaryArgument"><xsl:param name="ndCur" select="."/><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="$ndCur/preceding-sibling::*[1]/child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="preceding-sibling::*[1][self::mml:munder or self::mml:mover or self::mml:munderover or                                                     self::mml:msub or self::mml:msup or self::mml:msubsup]              and $fNary='true'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mrow|mml:mstyle"><xsl:variable name="fNaryArgument"><xsl:call-template name="FIsNaryArgument"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:if test="$fNaryArgument=0"><xsl:variable name="fLinearFrac"><xsl:call-template name="FLinearFrac"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fLinearFrac=1"><xsl:call-template name="MakeLinearFraction"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="fFunc"><xsl:call-template name="FIsFunc"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fFunc=1"><xsl:call-template name="WriteFunc"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:apply-templates mode="mml"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template mode="mml" match="mml:mi[not(child::mml:mglyph)] |                        mml:mn[not(child::mml:mglyph)] |                        mml:mo[not(child::mml:mglyph)] |                        mml:ms[not(child::mml:mglyph)] |                        mml:mtext[not(child::mml:mglyph)]"><xsl:variable name="fStartOfRun"><xsl:call-template name="FStartOfRun"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:variable name="fLinearFracParent"><xsl:call-template name="FLinearFrac"><xsl:with-param name="ndCur" select="parent::*"/></xsl:call-template></xsl:variable><xsl:variable name="fFunctionName"><xsl:call-template name="FIsFunc"><xsl:with-param name="ndCur" select="parent::*"/></xsl:call-template></xsl:variable><xsl:variable name="fShouldCollect" select="($fLinearFracParent=0 and $fFunctionName=0) and (parent::mml:mrow or parent::mml:mstyle or       parent::mml:msqrt or parent::mml:menclose or      parent::mml:math or parent::mml:mphantom or       parent::mml:mtd or parent::mml:maction)"/><xsl:choose><xsl:when test="$fShouldCollect"><xsl:choose><xsl:when test="$fStartOfRun=1"><xsl:call-template name="CreateRunWithSameProp"><xsl:with-param name="mathbackground"><xsl:choose><xsl:when test="@mathbackground"><xsl:value-of select="@mathbackground"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathbackground"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathcolor"><xsl:choose><xsl:when test="@mathcolor"><xsl:value-of select="@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathvariant"><xsl:choose><xsl:when test="@mathvariant"><xsl:value-of select="@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="color"><xsl:choose><xsl:when test="@color"><xsl:value-of select="@color"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:color"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="font-family"><xsl:choose><xsl:when test="@font-family"><xsl:value-of select="@font-family"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:font-family"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontsize"><xsl:choose><xsl:when test="@fontsize"><xsl:value-of select="@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontstyle"><xsl:choose><xsl:when test="@fontstyle"><xsl:value-of select="@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontweight"><xsl:choose><xsl:when test="@fontweight"><xsl:value-of select="@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathsize"><xsl:choose><xsl:when test="@mathsize"><xsl:value-of select="@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="ndTokenFirst" select="."/></xsl:call-template></xsl:when></xsl:choose></xsl:when><xsl:otherwise><m:r><xsl:call-template name="CreateRunProp"><xsl:with-param name="mathvariant"><xsl:choose><xsl:when test="@mathvariant"><xsl:value-of select="@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontstyle"><xsl:choose><xsl:when test="@fontstyle"><xsl:value-of select="@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontweight"><xsl:choose><xsl:when test="@fontweight"><xsl:value-of select="@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathcolor"><xsl:choose><xsl:when test="@mathcolor"><xsl:value-of select="@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathsize"><xsl:choose><xsl:when test="@mathsize"><xsl:value-of select="@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="color"><xsl:choose><xsl:when test="@color"><xsl:value-of select="@color"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:color"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontsize"><xsl:choose><xsl:when test="@fontsize"><xsl:value-of select="@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="ndCur" select="."/><xsl:with-param name="fNor"><xsl:call-template name="FNor"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param><xsl:with-param name="fLit"><xsl:call-template name="FLit"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param></xsl:call-template><m:t><xsl:call-template name="OutputText"><xsl:with-param name="sInput" select="normalize-space(.)"/></xsl:call-template></m:t></m:r></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateRunWithSameProp"><xsl:param name="mathbackground"/><xsl:param name="mathcolor"/><xsl:param name="mathvariant"/><xsl:param name="color"/><xsl:param name="font-family"/><xsl:param name="fontsize"/><xsl:param name="fontstyle"/><xsl:param name="fontweight"/><xsl:param name="mathsize"/><xsl:param name="ndTokenFirst"/><xsl:variable name="sColorPropCur"><xsl:choose><xsl:when test="$mathcolor!=''"><xsl:value-of select="$mathcolor"/></xsl:when><xsl:when test="$color!=''"><xsl:value-of select="$color"/></xsl:when><xsl:when test="$ndTokenFirst/ancestor::mml:mstyle[@color][1]/@color!=''"><xsl:value-of select="$ndTokenFirst/ancestor::mml:mstyle[@color][1]/@color"/></xsl:when><xsl:when test="$ndTokenFirst/ancestor::mml:mstyle[@mml:color][1]/@mml:color!=''"><xsl:value-of select="$ndTokenFirst/ancestor::mml:mstyle[@color][1]/@mml:color"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sSzCur"><xsl:choose><xsl:when test="$mathsize!=''"><xsl:value-of select="$mathsize"/></xsl:when><xsl:when test="$fontsize!=''"><xsl:value-of select="$fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="''"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sFontCur"><xsl:call-template name="GetFontCur"><xsl:with-param name="mathvariant" select="$mathvariant"/><xsl:with-param name="fontstyle" select="$fontstyle"/><xsl:with-param name="fontweight" select="$fontweight"/><xsl:with-param name="ndCur" select="$ndTokenFirst"/></xsl:call-template></xsl:variable><xsl:variable name="fNdTokenFirstIsMText"><xsl:choose><xsl:when test="$ndTokenFirst/self::mml:mtext">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="nndBeforeFirst" select="count($ndTokenFirst/preceding-sibling::*)"/><xsl:variable name="nndBeforeLim" select="count($ndTokenFirst/following-sibling::*      [(not(self::mml:mi) and not(self::mml:mn) and not(self::mml:mo) and not(self::mml:ms) and not(self::mml:mtext))      or      (self::mml:mi[child::mml:mglyph] or self::mml:mn[child::mml:mglyph] or self::mml:mo[child::mml:mglyph] or self::mml:ms[child::mml:mglyph] or self::mml:mtext[child::mml:mglyph])      or      (($fNdTokenFirstIsMText=1 and not(self::mml:mtext)) or ($fNdTokenFirstIsMText=0 and self::mml:mtext))      or        not(       ((($sFontCur=@mathvariant or $sFontCur=@mml:mathvariant)        or        ($sFontCur='normal'         and ((@mathvariant='normal' or @mml:mathvariant='normal')            or (((not(@mathvariant) or @mathvariant='') and (not(@mml:mathvariant) or @mml:mathvariant=''))              and (                     ((@fontstyle='normal' or @mml:fontstyle='normal') and (not(@fontweight='bold') and not(@mml:fontweight='bold')))                     or (self::mml:mi and string-length(normalize-space(.)) &gt; 1)                    )               )           )        )        or        ($sFontCur='italic'          and ((@mathvariant='italic' or @mml:mathvariant='italic')            or (((not(@mathvariant) or @mathvariant='') and (not(@mml:mathvariant) or @mml:mathvariant=''))             and (                     ((@fontstyle='italic' or @mml:fontstyle='italic') and (not(@fontweight='bold') and not(@mml:fontweight='bold')))                    or                  (self::mml:mn                  or self::mml:mo                 or (self::mml:mi and string-length(normalize-space(.)) &lt;= 1))                    )               )           )        )         or        ($sFontCur='bold'         and ((@mathvariant='bold' or @mml:mathvariant='bold')            or (((not(@mathvariant) or @mathvariant='') and (not(@mml:mathvariant) or @mml:mathvariant=''))                and (                     ((@fontweight='bold' or @mml:fontweight='bold')                     and ((@fontstyle='normal' or @mml:fontstyle='normal') or (self::mml:mi and string-length(normalize-space(.)) &lt;= 1))                    )               )             )             )        )         or        (($sFontCur='bi' or $sFontCur='bold-italic')         and (            (@mathvariant='bold-italic' or @mml:mathvariant='bold-italic')            or (((not(@mathvariant) or @mathvariant='') and (not(@mml:mathvariant) or @mml:mathvariant=''))             and (                ((@fontweight='bold' or @mml:fontweight='bold') and (@fontstyle='italic' or @mml:fontstyle='italic'))                or ((@fontweight='bold' or @mml:fontweight='bold')                   and (self::mml:mn                       or self::mml:mo                     or (self::mml:mi and string-length(normalize-space(.)) &lt;= 1)))                    )               )           )        )               or               (($sFontCur=''                   and (                      ((not(@mathvariant) or @mathvariant='')                         and (not(@mml:mathvariant) or @mml:mathvariant='')                         and (not(@fontstyle) or @fontstyle='')                         and (not(@mml:fontstyle) or @mml:fontstyle='')                         and (not(@fontweight)or @fontweight='')                         and (not(@mml:fontweight) or @mml:fontweight='')                 )                        or                          (@mathvariant='italic' or @mml:mathvariant='italic')                         or (                            ((not(@mathvariant) or @mathvariant='') and (not(@mml:mathvariant) or @mml:mathvariant=''))                                and (                                   (((@fontweight='normal' or @mml:fontweight='normal')                                    and (@fontstyle='italic' or @mml:fontstyle='italic'))                                   )                                   or                                   ((not(@fontweight) or @fontweight='') and (not(@mml:fontweight) or @mml:fontweight=''))                                    and (@fontstyle='italic' or @mml:fontstyle='italic')                                   or                                   ((not(@fontweight) or @fontweight='') and (not(@mml:fontweight) or @mml:fontweight=''))                                    and (not(@fontstyle) or @fontstyle='')                                    and (not(@mml:fontstyle) or @mml:fontstyle=''))                             )                 )                ))        or               ($sFontCur='normal'                 and ((self::mml:mi                       and (not(@mathvariant) or @mathvariant='')                   and (not(@mml:mathvariant) or @mml:mathvariant)                   and (not(@fontstyle) or @fontstyle='')                    and (not(@mml:fontstyle) or @mml:fontstyle='')                   and (not(@fontweight) or @fontweight='')                    and (not(@mml:fontweight) or @mml:fontweight='')                   and (string-length(normalize-space(.)) &gt; 1)                   )                  or ((self::mml:ms or self::mml:mtext)                    and (not(@mathvariant) or @mathvariant='')                   and (not(@mml:mathvariant) or @mml:mathvariant)                   and (not(@fontstyle) or @fontstyle)                   and (not(@fontstyle) or @fontstyle='')                   and (not(@fontweight) or @fontweight)                   and (not(@mml:fontweight) or @mml:fontweight='')                   )                  )               )           )       and             (($font-family = @font-family or $font-family = @mml:font-family)               or (($font-family='' or not($font-family))                and (not(@font-family) or @font-family='')                and (not(@mml:font-family) or @mml:font-family='')               )              )      ))      ][1]/preceding-sibling::*)"/><xsl:variable name="cndRun" select="$nndBeforeLim - $nndBeforeFirst"/><m:r><xsl:choose><xsl:when test="$cndRun &gt; 0"><xsl:call-template name="CreateRunProp"><xsl:with-param name="mathvariant" select="$mathvariant"/><xsl:with-param name="fontstyle" select="$fontstyle"/><xsl:with-param name="fontweight" select="$fontweight"/><xsl:with-param name="mathcolor" select="$mathcolor"/><xsl:with-param name="mathsize" select="$mathsize"/><xsl:with-param name="color" select="$color"/><xsl:with-param name="fontsize" select="$fontsize"/><xsl:with-param name="ndCur" select="$ndTokenFirst"/><xsl:with-param name="fNor"><xsl:call-template name="FNor"><xsl:with-param name="ndCur" select="$ndTokenFirst"/></xsl:call-template></xsl:with-param><xsl:with-param name="fLit"><xsl:call-template name="FLit"><xsl:with-param name="ndCur" select="$ndTokenFirst"/></xsl:call-template></xsl:with-param></xsl:call-template><m:t><xsl:call-template name="OutputText"><xsl:with-param name="sInput"><xsl:choose><xsl:when test="namespace-uri($ndTokenFirst) = 'http://www.w3.org/1998/Math/MathML' and local-name($ndTokenFirst) = 'ms'"><xsl:call-template name="OutputMs"><xsl:with-param name="msCur" select="$ndTokenFirst"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="normalize-space($ndTokenFirst)"/></xsl:otherwise></xsl:choose><xsl:for-each select="$ndTokenFirst/following-sibling::*[position() &lt; $cndRun]"><xsl:choose><xsl:when test="namespace-uri(.) = 'http://www.w3.org/1998/Math/MathML' and               local-name(.) = 'ms'"><xsl:call-template name="OutputMs"><xsl:with-param name="msCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="normalize-space(.)"/></xsl:otherwise></xsl:choose></xsl:for-each></xsl:with-param></xsl:call-template></m:t></xsl:when><xsl:otherwise><xsl:call-template name="CreateRunProp"><xsl:with-param name="mathvariant" select="$mathvariant"/><xsl:with-param name="fontstyle" select="$fontstyle"/><xsl:with-param name="fontweight" select="$fontweight"/><xsl:with-param name="mathcolor" select="$mathcolor"/><xsl:with-param name="mathsize" select="$mathsize"/><xsl:with-param name="color" select="$color"/><xsl:with-param name="fontsize" select="$fontsize"/><xsl:with-param name="ndCur" select="$ndTokenFirst"/><xsl:with-param name="fNor"><xsl:call-template name="FNor"><xsl:with-param name="ndCur" select="$ndTokenFirst"/></xsl:call-template></xsl:with-param><xsl:with-param name="fLit"><xsl:call-template name="FLit"><xsl:with-param name="ndCur" select="$ndTokenFirst"/></xsl:call-template></xsl:with-param></xsl:call-template><m:t><xsl:call-template name="OutputText"><xsl:with-param name="sInput"><xsl:choose><xsl:when test="namespace-uri($ndTokenFirst) = 'http://www.w3.org/1998/Math/MathML' and               local-name($ndTokenFirst) = 'ms'"><xsl:call-template name="OutputMs"><xsl:with-param name="msCur" select="$ndTokenFirst"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="normalize-space($ndTokenFirst)"/></xsl:otherwise></xsl:choose><xsl:for-each select="$ndTokenFirst/following-sibling::*[self::mml:mi or self::mml:mn or self::mml:mo or self::mml:ms or self::mml:mtext]"><xsl:choose><xsl:when test="namespace-uri(.) = 'http://www.w3.org/1998/Math/MathML' and               local-name(.) = 'ms'"><xsl:call-template name="OutputMs"><xsl:with-param name="msCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="normalize-space(.)"/></xsl:otherwise></xsl:choose></xsl:for-each></xsl:with-param></xsl:call-template></m:t></xsl:otherwise></xsl:choose></m:r><xsl:if test="$nndBeforeLim!=0             and ($ndTokenFirst/following-sibling::*[$cndRun]/self::mml:mi or             $ndTokenFirst/following-sibling::*[$cndRun]/self::mml:mn or            $ndTokenFirst/following-sibling::*[$cndRun]/self::mml:mo or            $ndTokenFirst/following-sibling::*[$cndRun]/self::mml:ms or                 $ndTokenFirst/following-sibling::*[$cndRun]/self::mml:mtext)              and (count($ndTokenFirst/following-sibling::*[$cndRun]/mml:mglyph) = 0)"><xsl:call-template name="CreateRunWithSameProp"><xsl:with-param name="mathbackground"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@mathbackground"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mathbackground"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:mathbackground"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathcolor"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@mathcolor"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathvariant"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@mathvariant"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="color"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@color"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@color"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:color"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="font-family"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@font-family"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@font-family"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:font-family"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontsize"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@fontsize"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontstyle"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@fontstyle"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontweight"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@fontweight"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathsize"><xsl:choose><xsl:when test="$ndTokenFirst/following-sibling::*[$cndRun]/@mathsize"><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndTokenFirst/following-sibling::*[$cndRun]/@mml:mathsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="ndTokenFirst" select="$ndTokenFirst/following-sibling::*[$cndRun]"/></xsl:call-template></xsl:if></xsl:template><xsl:template name="FNor"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="$ndCur/self::mml:mtext or ($ndCur/self::mml:mglyph and parent::mml:mtext)">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FLit"><xsl:param name="ndCur" select="."/><xsl:variable name="sLowerActiontype"><xsl:choose><xsl:when test="$ndCur/ancestor::mml:maction[@actiontype='lit']/@actiontype"><xsl:value-of select="translate($ndCur/ancestor::mml:maction[@actiontype='lit']/@actiontype, $StrUCAlphabet,                                                                                                       $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/ancestor::mml:maction[@actiontype='lit']/@mml:actiontype, $StrUCAlphabet,                                                                                                       $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$sLowerActiontype='lit'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateRunProp"><xsl:param name="mathbackground"/><xsl:param name="mathcolor"/><xsl:param name="mathvariant"/><xsl:param name="color"/><xsl:param name="font-family">Cambria Math</xsl:param><xsl:param name="fontsize"/><xsl:param name="fontstyle"/><xsl:param name="fontweight"/><xsl:param name="mathsize"/><xsl:param name="ndCur"/><xsl:param name="fNor"/><xsl:param name="fLit"/><w:rPr><xsl:call-template name="mathrRpHook"/><w:rFonts w:cs="{$font-family}" w:ascii="{$font-family}" w:eastAsia="{$font-family}" w:hAnsi="{$font-family}"/><w:sz w:val="{$pFontSize}"/><w:szCs w:val="{$pFontSize}"/><xsl:choose><xsl:when test="$fontweight=''"/><xsl:when test="$fontweight='bold'"><w:b/></xsl:when><xsl:when test="$fontweight='normal'"><w:b w:val="0"/></xsl:when></xsl:choose><xsl:choose><xsl:when test="$fontstyle=''"/><xsl:when test="$fontstyle='italic'"><w:i/></xsl:when><xsl:when test="$fontstyle='normal'"><w:i w:val="0"/></xsl:when></xsl:choose></w:rPr><xsl:variable name="mstyleColor"><xsl:if test="not(not($ndCur))"><xsl:choose><xsl:when test="$ndCur/ancestor::mml:mstyle[@color][1]/@color"><xsl:value-of select="$ndCur/ancestor::mml:mstyle[@color][1]/@color"/></xsl:when><xsl:otherwise><xsl:value-of select="$ndCur/ancestor::mml:mstyle[@color][1]/@mml:color"/></xsl:otherwise></xsl:choose></xsl:if></xsl:variable><xsl:call-template name="CreateMathRPR"><xsl:with-param name="mathvariant" select="$mathvariant"/><xsl:with-param name="fontstyle" select="$fontstyle"/><xsl:with-param name="fontweight" select="$fontweight"/><xsl:with-param name="ndCur" select="$ndCur"/><xsl:with-param name="fNor" select="$fNor"/><xsl:with-param name="fLit" select="$fLit"/></xsl:call-template></xsl:template><xsl:template name="CreateMathRPR"><xsl:param name="mathvariant"/><xsl:param name="fontstyle"/><xsl:param name="fontweight"/><xsl:param name="ndCur"/><xsl:param name="fNor"/><xsl:param name="fLit"/><xsl:variable name="sFontCur"><xsl:call-template name="GetFontCur"><xsl:with-param name="mathvariant" select="$mathvariant"/><xsl:with-param name="fontstyle" select="$fontstyle"/><xsl:with-param name="fontweight" select="$fontweight"/><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:variable><xsl:if test="$fLit=1 or $fNor=1 or ($sFontCur!='italic' and $sFontCur!='')"><m:rPr><xsl:if test="$fNor=1"><m:nor/></xsl:if><xsl:if test="$fLit=1"><m:lit/></xsl:if><xsl:call-template name="CreateMathScrStyProp"><xsl:with-param name="font" select="$sFontCur"/><xsl:with-param name="fNor" select="$fNor"/></xsl:call-template></m:rPr></xsl:if></xsl:template><xsl:template name="GetFontCur"><xsl:param name="ndCur"/><xsl:param name="mathvariant"/><xsl:param name="fontstyle"/><xsl:param name="fontweight"/><xsl:choose><xsl:when test="$mathvariant!=''"><xsl:value-of select="$mathvariant"/></xsl:when><xsl:when test="not($ndCur)"><xsl:value-of select="'italic'"/></xsl:when><xsl:when test="$ndCur/self::mml:mi and (string-length(normalize-space($ndCur)) &lt;= 1)               or $ndCur/self::mml:mn and string(number($ndCur/text()))!='NaN'               or $ndCur/self::mml:mo"><xsl:choose><xsl:when test="$fontstyle='normal' and $fontweight='bold'"><xsl:value-of select="'bold'"/></xsl:when><xsl:when test="$fontstyle='normal'"><xsl:value-of select="'normal'"/></xsl:when><xsl:when test="$fontweight='bold'"><xsl:value-of select="'bi'"/></xsl:when><xsl:when test="$fontweight='normal'"><xsl:value-of select="'i'"/></xsl:when><xsl:otherwise><xsl:value-of select="'italic'"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$fontstyle='italic' and $fontweight='bold'"><xsl:value-of select="'bi'"/></xsl:when><xsl:when test="$fontstyle='italic'"><xsl:value-of select="'italic'"/></xsl:when><xsl:when test="$fontweight='normal'"><xsl:value-of select="'italic'"/></xsl:when><xsl:when test="$fontweight='bold'"><xsl:value-of select="'bold'"/></xsl:when><xsl:otherwise><xsl:value-of select="'normal'"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateMathScrStyProp"><xsl:param name="font"/><xsl:param name="fNor" select="0"/><xsl:choose><xsl:when test="$font='normal' and $fNor=0"><m:sty><xsl:attribute name="m:val">p</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='bold'"><m:sty><xsl:attribute name="m:val">b</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='italic'"/><xsl:when test="$font='script'"><m:scr><xsl:attribute name="m:val">script</xsl:attribute></m:scr></xsl:when><xsl:when test="$font='bold-script'"><m:scr><xsl:attribute name="m:val">script</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">b</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='double-struck'"><m:scr><xsl:attribute name="m:val">double-struck</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">p</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='fraktur'"><m:scr><xsl:attribute name="m:val">fraktur</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">p</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='bold-fraktur'"><m:scr><xsl:attribute name="m:val">fraktur</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">b</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='sans-serif'"><m:scr><xsl:attribute name="m:val">sans-serif</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">p</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='bold-sans-serif'"><m:scr><xsl:attribute name="m:val">sans-serif</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">b</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='sans-serif-italic'"><m:scr><xsl:attribute name="m:val">sans-serif</xsl:attribute></m:scr></xsl:when><xsl:when test="$font='sans-serif-bold-italic'"><m:scr><xsl:attribute name="m:val">sans-serif</xsl:attribute></m:scr><m:sty><xsl:attribute name="m:val">bi</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='monospace'"/><xsl:when test="$font='bold'"><m:sty><xsl:attribute name="m:val">b</xsl:attribute></m:sty></xsl:when><xsl:when test="$font='bi' or $font='bold-italic'"><m:sty><xsl:attribute name="m:val">bi</xsl:attribute></m:sty></xsl:when></xsl:choose></xsl:template><xsl:template name="FBar"><xsl:param name="sLineThickness"/><xsl:variable name="sLowerLineThickness" select="translate($sLineThickness, $StrUCAlphabet, $StrLCAlphabet)"/><xsl:choose><xsl:when test="string-length($sLowerLineThickness)=0                       or $sLowerLineThickness='thin'                        or $sLowerLineThickness='medium'                        or $sLowerLineThickness='thick'">1</xsl:when><xsl:otherwise><xsl:variable name="fStrContainsNonZeroDigit"><xsl:call-template name="FStrContainsNonZeroDigit"><xsl:with-param name="s" select="$sLowerLineThickness"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fStrContainsNonZeroDigit=1">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mfrac"><xsl:variable name="fBar"><xsl:call-template name="FBar"><xsl:with-param name="sLineThickness"><xsl:choose><xsl:when test="@linethickness"><xsl:value-of select="@linethickness"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:linethickness"/></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:variable><m:f><m:fPr><m:type><xsl:attribute name="m:val"><xsl:choose><xsl:when test="$fBar=0">noBar</xsl:when><xsl:when test="@bevelled='true' or @mml:bevelled='true'">skw</xsl:when><xsl:otherwise>bar</xsl:otherwise></xsl:choose></xsl:attribute></m:type></m:fPr><m:num><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:num><m:den><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:den></m:f></xsl:template><xsl:template mode="mml" match="mml:menclose | mml:msqrt"><xsl:variable name="sLowerCaseNotation"><xsl:choose><xsl:when test="@notation"><xsl:value-of select="translate(@notation, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate(@mml:notation, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$sLowerCaseNotation='radical'                        or not($sLowerCaseNotation)                        or $sLowerCaseNotation=''                        or self::mml:msqrt"><m:rad><m:radPr><m:degHide><xsl:attribute name="m:val">on</xsl:attribute></m:degHide></m:radPr><m:deg><xsl:call-template name="CreateArgProp"/></m:deg><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml"/></m:e></m:rad></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$sLowerCaseNotation='actuarial' or $sLowerCaseNotation='longdiv'"/><xsl:otherwise><m:borderBox><xsl:variable name="fBox"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'box')                                   or contains($sLowerCaseNotation, 'circle')                                   or contains($sLowerCaseNotation, 'roundedbox')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fTop"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'top')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fBot"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'bottom')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fLeft"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'left')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fRight"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'right')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeH"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'horizontalstrike')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeV"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'verticalstrike')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeBLTR"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'updiagonalstrike')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fStrikeTLBR"><xsl:choose><xsl:when test="contains($sLowerCaseNotation, 'downdiagonalstrike')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:if test="$fStrikeH=1                            or $fStrikeV=1                           or $fStrikeBLTR=1                            or $fStrikeTLBR=1                           or ($fBox=0                               and not($fTop=1                                        and $fBot=1                                       and $fLeft=1                                       and $fRight=1)                               )"><m:borderBoxPr><xsl:if test="$fBox=0"><xsl:if test="$fTop=0"><m:hideTop><xsl:attribute name="m:val">on</xsl:attribute></m:hideTop></xsl:if><xsl:if test="$fBot=0"><m:hideBot><xsl:attribute name="m:val">on</xsl:attribute></m:hideBot></xsl:if><xsl:if test="$fLeft=0"><m:hideLeft><xsl:attribute name="m:val">on</xsl:attribute></m:hideLeft></xsl:if><xsl:if test="$fRight=0"><m:hideRight><xsl:attribute name="m:val">on</xsl:attribute></m:hideRight></xsl:if></xsl:if><xsl:if test="$fStrikeH=1"><m:strikeH><xsl:attribute name="m:val">on</xsl:attribute></m:strikeH></xsl:if><xsl:if test="$fStrikeV=1"><m:strikeV><xsl:attribute name="m:val">on</xsl:attribute></m:strikeV></xsl:if><xsl:if test="$fStrikeBLTR=1"><m:strikeBLTR><xsl:attribute name="m:val">on</xsl:attribute></m:strikeBLTR></xsl:if><xsl:if test="$fStrikeTLBR=1"><m:strikeTLBR><xsl:attribute name="m:val">on</xsl:attribute></m:strikeTLBR></xsl:if></m:borderBoxPr></xsl:if><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml"/></m:e></m:borderBox></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateArgProp"><xsl:if test="not(count(ancestor-or-self::mml:mstyle[@scriptlevel='0' or @scriptlevel='1' or @scriptlevel='2'])=0)                   or not(count(ancestor-or-self::mml:mstyle[@mml:scriptlevel='0' or @mml:scriptlevel='1' or @mml:scriptlevel='2'])=0)"><m:argPr><m:scrLvl><xsl:attribute name="m:val"><xsl:choose><xsl:when test="ancestor-or-self::mml:mstyle[@scriptlevel][1]/@scriptlevel"><xsl:value-of select="ancestor-or-self::mml:mstyle[@scriptlevel][1]/@scriptlevel"/></xsl:when><xsl:otherwise><xsl:value-of select="ancestor-or-self::mml:mstyle[@scriptlevel][1]/@mml:scriptlevel"/></xsl:otherwise></xsl:choose></xsl:attribute></m:scrLvl></m:argPr></xsl:if></xsl:template><xsl:template mode="mml" match="mml:mroot"><m:rad><m:radPr><m:degHide><xsl:attribute name="m:val">off</xsl:attribute></m:degHide></m:radPr><m:deg><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:deg><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e></m:rad></xsl:template><xsl:template name="FLinearFrac"><xsl:param name="ndCur" select="."/><xsl:variable name="sNdText"><xsl:value-of select="normalize-space($ndCur/*[2])"/></xsl:variable><xsl:choose><xsl:when test="$ndCur/self::mml:mrow                       and count($ndCur/*)=3                       and $ndCur/*[2][self::mml:mo]                       and $sNdText='/'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIsFunc"><xsl:param name="ndCur" select="."/><xsl:variable name="sNdText"><xsl:value-of select="normalize-space($ndCur/*[2])"/></xsl:variable><xsl:choose><xsl:when test="count($ndCur/*)=3               and $ndCur/self::*[self::mml:mrow]                       and $ndCur/*[2][self::mml:mo]                       and $sNdText='&#8289;'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="MakeLinearFraction"><xsl:param name="ndCur" select="."/><m:f><m:fPr><m:type><xsl:attribute name="m:val">lin</xsl:attribute></m:type></m:fPr><m:num><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="$ndCur/*[1]"/></m:num><m:den><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="$ndCur/*[3]"/></m:den></m:f></xsl:template><xsl:template name="WriteFunc"><xsl:param name="ndCur" select="."/><m:func><m:fName><xsl:apply-templates mode="mml" select="$ndCur/child::*[1]"/></m:fName><m:e><xsl:apply-templates mode="mml" select="$ndCur/child::*[3]"/></m:e></m:func></xsl:template><xsl:template name="NaryHandleMrowMstyle"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="$ndCur[self::mml:mrow]"><xsl:variable name="fLinearFrac"><xsl:call-template name="FLinearFrac"><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fLinearFrac=1"><xsl:call-template name="MakeLinearFraction"><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:variable name="fFunc"><xsl:call-template name="FIsFunc"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fFunc=1"><xsl:call-template name="WriteFunc"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:apply-templates mode="mml" select="$ndCur/*"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="$ndCur[self::mml:mstyle]"><xsl:apply-templates mode="mml" select="$ndCur/*"/></xsl:when></xsl:choose></xsl:template><xsl:template name="FIsBar"><xsl:param name="ndCur"/><xsl:variable name="fUnder"><xsl:choose><xsl:when test="$ndCur[self::mml:munder]">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseAccent"><xsl:choose><xsl:when test="$fUnder=1"><xsl:choose><xsl:when test="$ndCur/@accentunder"><xsl:value-of select="translate($ndCur/@accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/@mml:accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$ndCur/@accent"><xsl:value-of select="translate($ndCur/@accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/@mml:accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fAccent"><xsl:choose><xsl:when test="$sLowerCaseAccent='true'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fAccent = 0                        and $ndCur/child::*[2]/self::mml:mo"><xsl:variable name="sOperator"><xsl:value-of select="$ndCur/child::*[2]"/></xsl:variable><xsl:choose><xsl:when test="$fUnder = 1"><xsl:choose><xsl:when test="$sOperator = '&#818;'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$sOperator = '&#175;'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIsAcc"><xsl:param name="ndCur" select="."/><xsl:variable name="sLowerCaseAccent"><xsl:choose><xsl:when test="$ndCur/@accent"><xsl:value-of select="translate($ndCur/@accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/@mml:accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fAccent"><xsl:choose><xsl:when test="$sLowerCaseAccent='true'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fAccent = 1                        and $ndCur/child::*[2] = mml:mo"><xsl:variable name="sOperator"><xsl:value-of select="$ndCur/child::*[2]"/></xsl:variable><xsl:choose><xsl:when test="string-length($sOperator) = 1">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIsGroupChr"><xsl:param name="ndCur" select="."/><xsl:variable name="fUnder"><xsl:choose><xsl:when test="$ndCur[self::mml:munder]">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseAccent"><xsl:choose><xsl:when test="$fUnder=1"><xsl:choose><xsl:when test="$ndCur/@accentunder"><xsl:value-of select="translate($ndCur/@accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/@mml:accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$ndCur/@accent"><xsl:value-of select="translate($ndCur/@accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/@mml:accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fAccentFalse"><xsl:choose><xsl:when test="$sLowerCaseAccent='false'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fAccentFalse=1                       and $ndCur[self::mml:munder or self::mml:mover]                        and count($ndCur/child::*)=2                        and (($ndCur/child::*[1][self::mml:mrow] and $ndCur/child::*[2][self::mml:mo])                              or ($ndCur/child::*[1][self::mml:mo] and $ndCur/child::*[2][self::mml:mrow]))"><xsl:variable name="sOperator"><xsl:value-of select="$ndCur/child::mml:mo"/></xsl:variable><xsl:choose><xsl:when test="string-length($sOperator) &lt;= 1">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:munder"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'munder'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><xsl:variable name="fIsBar"><xsl:call-template name="FIsBar"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fIsBar=1"><m:bar><m:barPr><m:pos m:val="bot"/></m:barPr><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e></m:bar></xsl:when><xsl:otherwise><xsl:variable name="fGroupChr"><xsl:call-template name="FIsGroupChr"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fGroupChr=1"><m:groupChr><xsl:call-template name="CreateGroupChrPr"><xsl:with-param name="chr"><xsl:value-of select="mml:mo"/></xsl:with-param><xsl:with-param name="pos"><xsl:choose><xsl:when test="child::*[1][self::mml:mrow]">bot</xsl:when><xsl:otherwise>top</xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="vertJc">top</xsl:with-param></xsl:call-template><m:e><xsl:apply-templates mode="mml" select="mml:mrow"/></m:e></m:groupChr></xsl:when><xsl:otherwise><m:limLow><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:lim><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:lim></m:limLow></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateGroupChrPr"><xsl:param name="chr">&#9183;</xsl:param><xsl:param name="pos" select="bot"/><xsl:param name="vertJc" select="top"/><m:groupChrPr><m:chr><xsl:attribute name="m:val"><xsl:value-of select="$chr"/></xsl:attribute></m:chr><m:pos><xsl:attribute name="m:val"><xsl:value-of select="$pos"/></xsl:attribute></m:pos><m:vertJc><xsl:attribute name="m:val"><xsl:value-of select="$vertJc"/></xsl:attribute></m:vertJc></m:groupChrPr></xsl:template><xsl:template mode="mml" match="mml:mover"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'mover'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><xsl:variable name="fIsBar"><xsl:call-template name="FIsBar"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fIsBar = 1"><m:bar><m:barPr><m:pos m:val="top"/></m:barPr><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e></m:bar></xsl:when><xsl:otherwise><xsl:variable name="fIsAcc"><xsl:call-template name="FIsAcc"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fIsAcc=1"><m:acc><m:accPr><m:chr><xsl:attribute name="m:val"><xsl:value-of select="child::*[2]"/></xsl:attribute></m:chr></m:accPr><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e></m:acc></xsl:when><xsl:otherwise><xsl:variable name="fGroupChr"><xsl:call-template name="FIsGroupChr"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fGroupChr=1"><m:groupChr><xsl:call-template name="CreateGroupChrPr"><xsl:with-param name="chr"><xsl:value-of select="mml:mo"/></xsl:with-param><xsl:with-param name="pos"><xsl:choose><xsl:when test="child::*[1][self::mml:mrow]">top</xsl:when><xsl:otherwise>bot</xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="vertJc">bot</xsl:with-param></xsl:call-template><m:e><xsl:apply-templates mode="mml" select="mml:mrow"/></m:e></m:groupChr></xsl:when><xsl:otherwise><m:limUpp><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:lim><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:lim></m:limUpp></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:munderover"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'munderover'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[3]"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><m:limUpp><m:e><xsl:call-template name="CreateArgProp"/><m:limLow><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:lim><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:lim></m:limLow></m:e><m:lim><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[3]"/></m:lim></m:limUpp></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mfenced"><m:d><xsl:call-template name="CreateDelimProp"><xsl:with-param name="fChOpenValid"><xsl:choose><xsl:when test="@open"><xsl:value-of select="1"/></xsl:when><xsl:when test="@mml:open"><xsl:value-of select="1"/></xsl:when><xsl:otherwise><xsl:value-of select="0"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="chOpen"><xsl:choose><xsl:when test="@open"><xsl:value-of select="@open"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:open"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fChSeparatorsValid"><xsl:choose><xsl:when test="@separators"><xsl:value-of select="1"/></xsl:when><xsl:when test="@mml:separators"><xsl:value-of select="1"/></xsl:when><xsl:otherwise><xsl:value-of select="0"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="chSeparators"><xsl:choose><xsl:when test="@separators"><xsl:value-of select="@separators"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:separators"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fChCloseValid"><xsl:choose><xsl:when test="@close"><xsl:value-of select="1"/></xsl:when><xsl:when test="@mml:close"><xsl:value-of select="1"/></xsl:when><xsl:otherwise><xsl:value-of select="0"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="chClose"><xsl:choose><xsl:when test="@close"><xsl:value-of select="@close"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:close"/></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template><xsl:for-each select="*"><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="."/></m:e></xsl:for-each></m:d></xsl:template><xsl:template name="CreateDelimProp"><xsl:param name="fChOpenValid"/><xsl:param name="chOpen"/><xsl:param name="fChSeparatorsValid"/><xsl:param name="chSeparators"/><xsl:param name="fChCloseValid"/><xsl:param name="chClose"/><xsl:variable name="chSep" select="substring($chSeparators, 1, 1)"/><xsl:if test="($fChOpenValid=1 and not($chOpen = '(')) or         ($fChCloseValid=1 and not($chClose = ')')) or          not($chSep = '|')"><m:dPr><xsl:if test="$fChOpenValid=1 and not($chOpen = '(')"><m:begChr><xsl:attribute name="m:val"><xsl:value-of select="$chOpen"/></xsl:attribute></m:begChr></xsl:if><xsl:choose><xsl:when test="$chSep = '|'"/><xsl:when test="$fChSeparatorsValid=0"><m:sepChr m:val=","/></xsl:when><xsl:otherwise><m:sepChr><xsl:attribute name="m:val"><xsl:value-of select="$chSep"/></xsl:attribute></m:sepChr></xsl:otherwise></xsl:choose><xsl:if test="$fChCloseValid=1 and not($chClose = ')')"><m:endChr><xsl:attribute name="m:val"><xsl:value-of select="$chClose"/></xsl:attribute></m:endChr></xsl:if></m:dPr></xsl:if></xsl:template><xsl:template name="OutputMs"><xsl:param name="msCur"/><xsl:choose><xsl:when test="(not($msCur/@lquote) or $msCur/@lquote='')                       and (not($msCur/@mml:lquote) or $msCur/@mml:lquote='')"><xsl:text>"</xsl:text></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$msCur/@lquote"><xsl:value-of select="$msCur/@lquote"/></xsl:when><xsl:otherwise><xsl:value-of select="$msCur/@mml:lquote"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose><xsl:value-of select="normalize-space($msCur)"/><xsl:choose><xsl:when test="(not($msCur/@rquote) or $msCur/@rquote='')                        and (not($msCur/@mml:rquote) or $msCur/@mml:rquote='')"><xsl:text>"</xsl:text></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$msCur/@rquote"><xsl:value-of select="$msCur/@rquote"/></xsl:when><xsl:otherwise><xsl:value-of select="$msCur/@mml:rquote"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:msub"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'msub'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><m:sSub><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub></m:sSub></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:msup"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'msup'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><m:sSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sup></m:sSup></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:msubsup"><xsl:variable name="fNary"><xsl:call-template name="isNary"><xsl:with-param name="ndCur" select="child::*[1]"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNary='true'"><m:nary><xsl:call-template name="CreateNaryProp"><xsl:with-param name="chr"><xsl:value-of select="normalize-space(child::*[1])"/></xsl:with-param><xsl:with-param name="sMathmlType" select="'msubsup'"/></xsl:call-template><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[3]"/></m:sup><m:e><xsl:call-template name="CreateArgProp"/><xsl:call-template name="NaryHandleMrowMstyle"><xsl:with-param name="ndCur" select="following-sibling::*[1]"/></xsl:call-template></m:e></m:nary></xsl:when><xsl:otherwise><m:sSubSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[2]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[3]"/></m:sup></m:sSubSup></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="SplitScripts"><xsl:param name="ndScripts"/><m:sub><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="$ndScripts[(position() mod 2) = 1]"/></m:sub><m:sup><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="$ndScripts[(position() mod 2) = 0]"/></m:sup></xsl:template><xsl:template mode="mml" match="mml:mmultiscripts"><xsl:variable name="cndPrescriptStrict" select="count(mml:mprescripts[1]/following-sibling::*[not(self::mml:none)])"/><xsl:variable name="cndSuperScript" select="count(*[not(preceding-sibling::mml:mprescripts)                               and not(self::mml:mprescripts)                               and ((position() mod 2) = 1)                                and not(self::mml:none)]) - 1"/><xsl:variable name="cndSubScript" select="count(*[not(preceding-sibling::mml:mprescripts)                               and not(self::mml:mprescripts)                               and ((position() mod 2) = 0)                                and not(self::mml:none)])"/><xsl:variable name="cndScriptStrict" select="$cndSuperScript + $cndSubScript"/><xsl:variable name="cndScript" select="count(*[not(preceding-sibling::mml:mprescripts) and not(self::mml:mprescripts)]) - 1"/><xsl:choose><xsl:when test="$cndPrescriptStrict &lt;= 0 and $cndScriptStrict &lt;= 0"><xsl:apply-templates mode="mml" select="*[1]"/></xsl:when><xsl:when test="$cndPrescriptStrict &lt;= 0"><xsl:choose><xsl:when test="$cndSuperScript &gt; 0 and $cndSubScript &gt; 0"><m:sSubSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><xsl:call-template name="SplitScripts"><xsl:with-param name="ndScripts" select="*[position() &gt; 1]"/></xsl:call-template></m:sSubSup></xsl:when><xsl:when test="$cndSubScript &gt; 0"><m:sSub><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sub><xsl:apply-templates mode="mml" select="*[position() &gt; 1]"/></m:sub></m:sSub></xsl:when><xsl:otherwise><m:sSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sup><xsl:apply-templates mode="mml" select="*[position() &gt; 1]"/></m:sup></m:sSup></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="$cndScriptStrict &lt;= 0"><m:sPre><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><xsl:call-template name="SplitScripts"><xsl:with-param name="ndScripts" select="mml:mprescripts[1]/following-sibling::*"/></xsl:call-template></m:sPre></xsl:when><xsl:otherwise><m:sPre><m:e><xsl:choose><xsl:when test="$cndSuperScript &gt; 0 and $cndSubScript &gt; 0"><m:sSubSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><xsl:call-template name="SplitScripts"><xsl:with-param name="ndScripts" select="*[(position() &gt; 1) and (position() &lt;= ($cndScript + 1))]"/></xsl:call-template></m:sSubSup></xsl:when><xsl:when test="$cndSubScript &gt; 0"><m:sSub><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sub><xsl:apply-templates mode="mml" select="*[position() &gt; 1 and (position() &lt;= ($cndScript + 1))]"/></m:sub></m:sSub></xsl:when><xsl:otherwise><m:sSup><m:e><xsl:call-template name="CreateArgProp"/><xsl:apply-templates mode="mml" select="child::*[1]"/></m:e><m:sup><xsl:apply-templates mode="mml" select="*[position() &gt; 1 and (position() &lt;= ($cndScript + 1))]"/></m:sup></m:sSup></xsl:otherwise></xsl:choose></m:e><xsl:call-template name="SplitScripts"><xsl:with-param name="ndScripts" select="mml:mprescripts[1]/following-sibling::*"/></xsl:call-template></m:sPre></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIsEqArray"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="@columnalign!='center'">0</xsl:when><xsl:when test="(not($ndCur/@frame) or $ndCur/@frame='' or $ndCur/@frame='none')                            and (not($ndCur/@mml:frame) or $ndCur/@mml:frame='' or $ndCur/@mml:frame='none')     and (not($ndCur/@columnlines) or $ndCur/@columnlines='' or $ndCur/@columnlines='none')                            and (not($ndCur/@mml:columnlines) or $ndCur/@mml:columnlines='' or $ndCur/@mml:columnlines='none')                    and (not($ndCur/@rowlines) or $ndCur/@rowlines='' or $ndCur/@rowlines='none')                            and (not($ndCur/@mml:rowlines) or $ndCur/@mml:rowlines='' or $ndCur/@mml:rowlines='none')                    and not($ndCur/mml:mtr[count(mml:mtd) &gt; 1])                 and not($ndCur/mml:mtr[count(mml:mtd) &lt; 1])     and not($ndCur/mml:mlabeledtr)">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FIgnoreCollection"><xsl:param name="ndCur" select="."/><xsl:variable name="fNaryArgument"><xsl:call-template name="FIsNaryArgument"><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fNaryArgument=1">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FFirstAlignAlreadyFound"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="count($ndCur/preceding-sibling::*[descendant-or-self::mml:maligngroup                                                 or descendant-or-self::mml:malignmark]) &gt; 0">1</xsl:when><xsl:when test="not($ndCur/parent::mml:mtd)"><xsl:call-template name="FFirstAlignAlreadyFound"><xsl:with-param name="ndCur" select="$ndCur/parent::*"/></xsl:call-template></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ConcatStringRepeat"><xsl:param name="strToRepeat" select="''"/><xsl:param name="iRepetitions" select="0"/><xsl:param name="strBuilding" select="''"/><xsl:choose><xsl:when test="$iRepetitions &lt;= 0"><xsl:value-of select="$strBuilding"/></xsl:when><xsl:otherwise><xsl:call-template name="ConcatStringRepeat"><xsl:with-param name="strToRepeat" select="$strToRepeat"/><xsl:with-param name="iRepetitions" select="$iRepetitions - 1"/><xsl:with-param name="strBuilding" select="concat($strBuilding, $strToRepeat)"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FSpecialCollection"><xsl:param name="ndCur" select="."/><xsl:choose><xsl:when test="$ndCur/self::mml:mrow"><xsl:variable name="fLinearFraction"><xsl:call-template name="FLinearFrac"><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:variable><xsl:variable name="fFunc"><xsl:call-template name="FIsFunc"><xsl:with-param name="ndCur" select="$ndCur"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fLinearFraction=1 or $fFunc=1">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="ProcessEqArrayRow"><xsl:param name="ndCur" select="."/><xsl:for-each select="$ndCur/*"><xsl:variable name="fSpecialCollection"><xsl:call-template name="FSpecialCollection"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:variable name="fIgnoreCollection"><xsl:call-template name="FIgnoreCollection"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="self::mml:maligngroup or self::mml:malignmark"><xsl:variable name="fFirstAlignAlreadyFound"><xsl:call-template name="FFirstAlignAlreadyFound"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:if test="self::mml:malignmark or $fFirstAlignAlreadyFound=1"><m:r><m:t>&amp;</m:t></m:r></xsl:if></xsl:when><xsl:when test="$fIgnoreCollection=0 and ((self::mml:mrow and $fSpecialCollection=0) or self::mml:mstyle)"><xsl:call-template name="ProcessEqArrayRow"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:when><xsl:when test="descendant::mml:maligngroup or descendant::mml:malignmark"><xsl:variable name="cMalignGroups"><xsl:value-of select="count(descendant::mml:maligngroup)"/></xsl:variable><xsl:variable name="cMalignMarks"><xsl:value-of select="count(descendant::mml:malignmark)"/></xsl:variable><xsl:if test="$cMalignGroups + $cMalignMarks &gt; 0"><xsl:variable name="str"><xsl:call-template name="ConcatStringRepeat"><xsl:with-param name="strToRepeat" select="'&amp;'"/><xsl:with-param name="iRepetitions" select="$cMalignGroups + $cMalignMarks"/><xsl:with-param name="strBuilding" select="''"/></xsl:call-template></xsl:variable><m:r><m:t><xsl:call-template name="OutputText"><xsl:with-param name="sInput" select="$str"/></xsl:call-template></m:t></m:r></xsl:if><xsl:apply-templates mode="mml" select="."/></xsl:when><xsl:otherwise><xsl:apply-templates mode="mml" select="."/></xsl:otherwise></xsl:choose></xsl:for-each></xsl:template><xsl:template mode="mml" match="mml:mtable"><xsl:variable name="fEqArray"><xsl:call-template name="FIsEqArray"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:variable><xsl:variable name="alignment"><xsl:value-of select="@columnalign"/></xsl:variable><xsl:choose><xsl:when test="$fEqArray=1"><m:eqArr><xsl:if test="$alignment!=''"><m:eqArrPr><m:baseJc m:val="{$alignment}"/></m:eqArrPr></xsl:if><xsl:for-each select="mml:mtr"><m:e><xsl:call-template name="ProcessEqArrayRow"><xsl:with-param name="ndCur" select="mml:mtd"/></xsl:call-template></m:e></xsl:for-each></m:eqArr></xsl:when><xsl:otherwise><xsl:variable name="cMaxElmtsInRow"><xsl:call-template name="CountMaxElmtsInRow"><xsl:with-param name="ndCur" select="*[1]"/><xsl:with-param name="cMaxElmtsInRow" select="0"/></xsl:call-template></xsl:variable><m:m><m:mPr><m:baseJc m:val="center"/><m:plcHide m:val="on"/><m:mcs><m:mc><m:mcPr><m:count><xsl:attribute name="m:val"><xsl:value-of select="$cMaxElmtsInRow"/></xsl:attribute></m:count><xsl:if test="$alignment!=''"><m:mcJc m:val="{$alignment}"/></xsl:if></m:mcPr></m:mc></m:mcs></m:mPr><xsl:for-each select="*"><xsl:choose><xsl:when test="self::mml:mtr or self::mml:mlabeledtr"><m:mr><xsl:choose><xsl:when test="self::mml:mtr"><xsl:for-each select="*"><m:e><xsl:apply-templates mode="mml" select="."/></m:e></xsl:for-each><xsl:call-template name="CreateEmptyElmt"><xsl:with-param name="cEmptyMtd" select="$cMaxElmtsInRow - count(*)"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:for-each select="*[position() &gt; 1]"><m:e><xsl:apply-templates mode="mml" select="."/></m:e></xsl:for-each><xsl:call-template name="CreateEmptyElmt"><xsl:with-param name="cEmptyMtd" select="$cMaxElmtsInRow - (count(*) - 1)"/></xsl:call-template></xsl:otherwise></xsl:choose></m:mr></xsl:when><xsl:otherwise><m:mr><m:e><xsl:apply-templates mode="mml" select="."/></m:e><xsl:call-template name="CreateEmptyElmt"><xsl:with-param name="cEmptyMtd" select="$cMaxElmtsInRow - 1"/></xsl:call-template></m:mr></xsl:otherwise></xsl:choose></xsl:for-each></m:m></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="m:mtd"><xsl:apply-templates mode="mml"/></xsl:template><xsl:template name="CreateEmptyElmt"><xsl:param name="cEmptyMtd"/><xsl:if test="$cEmptyMtd &gt; 0"><m:e/><xsl:call-template name="CreateEmptyElmt"><xsl:with-param name="cEmptyMtd" select="$cEmptyMtd - 1"/></xsl:call-template></xsl:if></xsl:template><xsl:template name="CountMaxElmtsInRow"><xsl:param name="ndCur"/><xsl:param name="cMaxElmtsInRow" select="0"/><xsl:choose><xsl:when test="not($ndCur)"><xsl:value-of select="$cMaxElmtsInRow"/></xsl:when><xsl:otherwise><xsl:call-template name="CountMaxElmtsInRow"><xsl:with-param name="ndCur" select="$ndCur/following-sibling::*[1]"/><xsl:with-param name="cMaxElmtsInRow"><xsl:choose><xsl:when test="local-name($ndCur) = 'mlabeledtr' and                      namespace-uri($ndCur) = 'http://www.w3.org/1998/Math/MathML'"><xsl:choose><xsl:when test="(count($ndCur/*) - 1) &gt; $cMaxElmtsInRow"><xsl:value-of select="count($ndCur/*) - 1"/></xsl:when><xsl:otherwise><xsl:value-of select="$cMaxElmtsInRow"/></xsl:otherwise></xsl:choose></xsl:when><xsl:when test="local-name($ndCur) = 'mtr' and                      namespace-uri($ndCur) = 'http://www.w3.org/1998/Math/MathML'"><xsl:choose><xsl:when test="count($ndCur/*) &gt; $cMaxElmtsInRow"><xsl:value-of select="count($ndCur/*)"/></xsl:when><xsl:otherwise><xsl:value-of select="$cMaxElmtsInRow"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="1 &gt; $cMaxElmtsInRow"><xsl:value-of select="1"/></xsl:when><xsl:otherwise><xsl:value-of select="$cMaxElmtsInRow"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mglyph"><xsl:call-template name="CreateMglyph"/></xsl:template><xsl:template mode="mml" match="mml:mi[child::mml:mglyph] |                        mml:mn[child::mml:mglyph] |                        mml:mo[child::mml:mglyph] |                        mml:ms[child::mml:mglyph] |                        mml:mtext[child::mml:mglyph]"><xsl:if test="string-length(normalize-space(.)) &gt; 0"><m:r><xsl:call-template name="CreateRunProp"><xsl:with-param name="mathvariant"><xsl:choose><xsl:when test="@mathvariant"><xsl:value-of select="@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontstyle"><xsl:choose><xsl:when test="@fontstyle"><xsl:value-of select="@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontweight"><xsl:choose><xsl:when test="@fontweight"><xsl:value-of select="@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathcolor"><xsl:choose><xsl:when test="@mathcolor"><xsl:value-of select="@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathsize"><xsl:choose><xsl:when test="@mathsize"><xsl:value-of select="@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="color"><xsl:choose><xsl:when test="@color"><xsl:value-of select="@color"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:color"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontsize"><xsl:choose><xsl:when test="@fontsize"><xsl:value-of select="@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fNor"><xsl:call-template name="FNor"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param><xsl:with-param name="fLit"><xsl:call-template name="FLit"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param><xsl:with-param name="ndCur" select="."/></xsl:call-template><m:t><xsl:call-template name="OutputText"><xsl:with-param name="sInput"><xsl:choose><xsl:when test="self::mml:ms"><xsl:call-template name="OutputMs"><xsl:with-param name="msCur" select="."/></xsl:call-template></xsl:when><xsl:otherwise><xsl:value-of select="normalize-space(.)"/></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></m:t></m:r></xsl:if><xsl:for-each select="child::mml:mglyph"><xsl:call-template name="CreateMglyph"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:for-each></xsl:template><xsl:template name="FGlyphIndexOk"><xsl:param name="index"/><xsl:if test="$index != ''"><xsl:choose><xsl:when test="string(number(string(floor($index)))) = 'NaN'"/><xsl:when test="number($index) &lt; 32 and not(number($index) = 9 or number($index) = 10 or number($index) = 13)"/><xsl:when test="number($index) = 65534 or number($index) = 65535"/><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="CreateMglyph"><xsl:param name="ndCur"/><m:r><xsl:call-template name="CreateRunProp"><xsl:with-param name="mathvariant"><xsl:choose><xsl:when test="(not(@mathvariant) or @mathvariant='')                              and (not(@mml:mathvariant) or @mml:mathvariant='')                             and (../@mathvariant!='' or ../@mml:mathvariant!='')"><xsl:choose><xsl:when test="../@mathvariant"><xsl:value-of select="../@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="../mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@mathvariant"><xsl:value-of select="@mathvariant"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathvariant"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontstyle"><xsl:choose><xsl:when test="(not(@fontstyle) or @fontstyle='')                              and (not(@mml:fontstyle) or @mml:fontstyle='')                             and (../@fontstyle!='' or ../@mml:fontstyle!='')"><xsl:choose><xsl:when test="../@fontstyle"><xsl:value-of select="../@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@fontstyle"><xsl:value-of select="@fontstyle"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontstyle"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontweight"><xsl:choose><xsl:when test="(not(@fontweight) or @fontweight='')                              and (not(@mml:fontweight) or @mml:fontweight='')                             and (../@fontweight!='' or ../@mml:fontweight!='')"><xsl:choose><xsl:when test="../@fontweight"><xsl:value-of select="../@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@fontweight"><xsl:value-of select="@fontweight"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontweight"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathcolor"><xsl:choose><xsl:when test="(not(@mathcolor) or @mathcolor='')                              and (not(@mml:mathcolor) or @mml:mathcolor='')                             and (../@mathcolor!='' or ../@mml:mathcolor!='')"><xsl:choose><xsl:when test="../@mathcolor"><xsl:value-of select="../@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@mathcolor"><xsl:value-of select="@mathcolor"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathcolor"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="mathsize"><xsl:choose><xsl:when test="(not(@mathsize) or @mathsize='')                             and (not(@mml:mathsize) or @mml:mathsize='')                             and (../@mathsize!='' or ../@mml:mathsize!='')"><xsl:choose><xsl:when test="../@mathsize"><xsl:value-of select="../@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mathsize"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@mathsize"><xsl:value-of select="@mathsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:mathsize"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="color"><xsl:choose><xsl:when test="(not(@color) or @color='')                              and (not(@mml:color) or @mml:color='')                             and (../@color!='' or ../@mml:color!='')"><xsl:choose><xsl:when test="../@color"><xsl:value-of select="../@color"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mml:color"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@color"><xsl:value-of select="@color"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:color"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fontsize"><xsl:choose><xsl:when test="(not(@fontsize) or @fontsize='')                             and (not(@mml:fontsize) or @mml:fontsize='')                             and (../@fontsize!='' or ../@mml:fontsize!='')"><xsl:choose><xsl:when test="../@fontsize"><xsl:value-of select="../@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="../@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="@fontsize"><xsl:value-of select="@fontsize"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontsize"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="ndCur" select="."/><xsl:with-param name="font-family"><xsl:choose><xsl:when test="@fontfamily"><xsl:value-of select="@fontfamily"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:fontfamily"/></xsl:otherwise></xsl:choose></xsl:with-param><xsl:with-param name="fNor"><xsl:call-template name="FNor"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param><xsl:with-param name="fLit"><xsl:call-template name="FLit"><xsl:with-param name="ndCur" select="."/></xsl:call-template></xsl:with-param></xsl:call-template><xsl:variable name="shouldGlyphUseIndex"><xsl:call-template name="FGlyphIndexOk"><xsl:with-param name="index"><xsl:choose><xsl:when test="@index"><xsl:value-of select="@index"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:index"/></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="not($shouldGlyphUseIndex = '1')"><m:t><xsl:choose><xsl:when test="@alt"><xsl:value-of select="@alt"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:alt"/></xsl:otherwise></xsl:choose></m:t></xsl:when><xsl:otherwise><xsl:variable name="nHexIndex"><xsl:call-template name="ConvertDecToHex"><xsl:with-param name="index"><xsl:choose><xsl:when test="@index"><xsl:value-of select="@index"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:index"/></xsl:otherwise></xsl:choose></xsl:with-param></xsl:call-template></xsl:variable><m:t><xsl:text disable-output-escaping="yes">&amp;#x</xsl:text><xsl:value-of select="$nHexIndex"/><xsl:text>;</xsl:text></m:t></xsl:otherwise></xsl:choose></m:r></xsl:template><xsl:template name="ConvertDecToHex"><xsl:param name="index"/><xsl:if test="$index &gt; 0"><xsl:call-template name="ConvertDecToHex"><xsl:with-param name="index" select="floor($index div 16)"/></xsl:call-template><xsl:choose><xsl:when test="$index mod 16 &lt; 10"><xsl:value-of select="$index mod 16"/></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$index mod 16 = 10">A</xsl:when><xsl:when test="$index mod 16 = 11">B</xsl:when><xsl:when test="$index mod 16 = 12">C</xsl:when><xsl:when test="$index mod 16 = 13">D</xsl:when><xsl:when test="$index mod 16 = 14">E</xsl:when><xsl:when test="$index mod 16 = 15">F</xsl:when><xsl:otherwise>A</xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:if></xsl:template><xsl:template name="FStrContainsNonZeroDigit"><xsl:param name="s"/><xsl:variable name="sNonZeroDigitsToNineDigit" select="translate($s, '12345678', '99999999')"/><xsl:choose><xsl:when test="contains($sNonZeroDigitsToNineDigit, '9')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FStrContainsDigits"><xsl:param name="s"/><xsl:variable name="sDigitsToZeroDigit" select="translate($s, '123456789', '000000000')"/><xsl:choose><xsl:when test="contains($sDigitsToZeroDigit, '0')">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="FFull"><xsl:param name="s"/><xsl:variable name="fStrContainsNonZeroDigit"><xsl:call-template name="FStrContainsNonZeroDigit"><xsl:with-param name="s" select="$s"/></xsl:call-template></xsl:variable><xsl:variable name="fStrContainsDigits"><xsl:call-template name="FStrContainsDigits"><xsl:with-param name="s" select="$s"/></xsl:call-template></xsl:variable><xsl:choose><xsl:when test="$fStrContainsNonZeroDigit=1">1</xsl:when><xsl:when test="$fStrContainsDigits=1">0</xsl:when><xsl:otherwise>1</xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreatePhantPropertiesCore"><xsl:param name="fShow" select="1"/><xsl:param name="fFullWidth" select="1"/><xsl:param name="fFullHeight" select="1"/><xsl:param name="fFullDepth" select="1"/><xsl:if test="$fShow=0                      or $fFullWidth=0                      or $fFullHeight=0                     or $fFullDepth=0"><m:phantPr><xsl:if test="$fShow=0"><m:show><xsl:attribute name="m:val">off</xsl:attribute></m:show></xsl:if><xsl:if test="$fFullWidth=0"><m:zeroWid><xsl:attribute name="m:val">on</xsl:attribute></m:zeroWid></xsl:if><xsl:if test="$fFullHeight=0"><m:zeroAsc><xsl:attribute name="m:val">on</xsl:attribute></m:zeroAsc></xsl:if><xsl:if test="$fFullDepth=0"><m:zeroDesc><xsl:attribute name="m:val">on</xsl:attribute></m:zeroDesc></xsl:if></m:phantPr></xsl:if></xsl:template><xsl:template name="CreatePhantProperties"><xsl:param name="ndCur" select="."/><xsl:param name="fShow" select="1"/><xsl:choose><xsl:when test="count($ndCur/child::*)=1 and count($ndCur/mml:mpadded)=1"><xsl:variable name="sLowerCaseWidth"><xsl:choose><xsl:when test="$ndCur/mml:mpadded/@width"><xsl:value-of select="translate($ndCur/mml:mpadded/@width, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/mml:mpadded/@mml:width, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseHeight"><xsl:choose><xsl:when test="$ndCur/mml:mpadded/@height"><xsl:value-of select="translate($ndCur/mml:mpadded/@height, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/mml:mpadded/@mml:height, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseDepth"><xsl:choose><xsl:when test="$ndCur/mml:mpadded/@depth"><xsl:value-of select="translate($ndCur/mml:mpadded/@depth, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/mml:mpadded/@mml:depth, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fFullWidth"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseWidth"/></xsl:call-template></xsl:variable><xsl:variable name="fFullHeight"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseHeight"/></xsl:call-template></xsl:variable><xsl:variable name="fFullDepth"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseDepth"/></xsl:call-template></xsl:variable><xsl:call-template name="CreatePhantPropertiesCore"><xsl:with-param name="fShow" select="$fShow"/><xsl:with-param name="fFullWidth" select="$fFullWidth"/><xsl:with-param name="fFullHeight" select="$fFullHeight"/><xsl:with-param name="fFullDepth" select="$fFullDepth"/></xsl:call-template></xsl:when><xsl:otherwise><xsl:call-template name="CreatePhantPropertiesCore"><xsl:with-param name="fShow" select="$fShow"/></xsl:call-template></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mpadded"><xsl:choose><xsl:when test="count(parent::mml:mphantom)=1 and count(preceding-sibling::*)=0 and count(following-sibling::*)=0"><xsl:apply-templates mode="mml"/></xsl:when><xsl:otherwise><xsl:variable name="sLowerCaseWidth"><xsl:choose><xsl:when test="@width"><xsl:value-of select="@width"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:width"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseHeight"><xsl:choose><xsl:when test="@height"><xsl:value-of select="@height"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:height"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseDepth"><xsl:choose><xsl:when test="@depth"><xsl:value-of select="@depth"/></xsl:when><xsl:otherwise><xsl:value-of select="@mml:depth"/></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fFullWidth"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseWidth"/></xsl:call-template></xsl:variable><xsl:variable name="fFullHeight"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseHeight"/></xsl:call-template></xsl:variable><xsl:variable name="fFullDepth"><xsl:call-template name="FFull"><xsl:with-param name="s" select="$sLowerCaseDepth"/></xsl:call-template></xsl:variable><m:phant><xsl:call-template name="CreatePhantPropertiesCore"><xsl:with-param name="fShow" select="1"/><xsl:with-param name="fFullWidth" select="$fFullWidth"/><xsl:with-param name="fFullHeight" select="$fFullHeight"/><xsl:with-param name="fFullDepth" select="$fFullDepth"/></xsl:call-template><m:e><xsl:apply-templates mode="mml"/></m:e></m:phant></xsl:otherwise></xsl:choose></xsl:template><xsl:template mode="mml" match="mml:mphantom"><m:phant><xsl:call-template name="CreatePhantProperties"><xsl:with-param name="ndCur" select="."/><xsl:with-param name="fShow" select="0"/></xsl:call-template><m:e><xsl:apply-templates mode="mml"/></m:e></m:phant></xsl:template><xsl:template name="isNaryOper"><xsl:param name="sNdCur"/><xsl:value-of select="($sNdCur = '&#8747;' or $sNdCur = '&#8748;' or $sNdCur = '&#8749;' or $sNdCur = '&#8750;' or $sNdCur = '&#8751;' or $sNdCur = '&#8752;' or $sNdCur = '&#8754;' or $sNdCur = '&#8755;' or $sNdCur = '&#8753;' or $sNdCur = '&#8745;' or $sNdCur = '&#8746;' or $sNdCur = '&#8719;' or $sNdCur = '&#8720;' or $sNdCur = '&#8721;')"/></xsl:template><xsl:template name="isNary"><xsl:param name="ndCur"/><xsl:variable name="sNdCur"><xsl:value-of select="normalize-space($ndCur)"/></xsl:variable><xsl:variable name="fNaryOper"><xsl:call-template name="isNaryOper"><xsl:with-param name="sNdCur" select="$sNdCur"/></xsl:call-template></xsl:variable><xsl:variable name="fUnder"><xsl:choose><xsl:when test="$ndCur/parent::*[self::mml:munder]">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="sLowerCaseAccent"><xsl:choose><xsl:when test="$fUnder=1"><xsl:choose><xsl:when test="$ndCur/parent::*[self::mml:munder]/@accentunder"><xsl:value-of select="translate($ndCur/parent::*[self::mml:munder]/@accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/parent::*[self::mml:munder]/@mml:accentunder, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:when><xsl:otherwise><xsl:choose><xsl:when test="$ndCur/parent::*/@accent"><xsl:value-of select="translate($ndCur/parent::*/@accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:when><xsl:otherwise><xsl:value-of select="translate($ndCur/parent::*/@mml:accent, $StrUCAlphabet, $StrLCAlphabet)"/></xsl:otherwise></xsl:choose></xsl:otherwise></xsl:choose></xsl:variable><xsl:variable name="fAccent"><xsl:choose><xsl:when test="$sLowerCaseAccent='true'">1</xsl:when><xsl:otherwise>0</xsl:otherwise></xsl:choose></xsl:variable><xsl:choose><xsl:when test="$fNaryOper = 'true'                       and $fAccent=0                       and $ndCur/descendant-or-self::*[last()]/self::mml:mo                       and not($ndCur/descendant-or-self::*[not(self::mml:mo or                                                          self::mml:mstyle or                                                          self::mml:mrow)])"><xsl:value-of select="true()"/></xsl:when><xsl:otherwise><xsl:value-of select="false()"/></xsl:otherwise></xsl:choose></xsl:template><xsl:template name="CreateNaryProp"><xsl:param name="chr"/><xsl:param name="sMathmlType"/><m:naryPr><m:chr><xsl:attribute name="m:val"><xsl:value-of select="$chr"/></xsl:attribute></m:chr><m:limLoc><xsl:attribute name="m:val"><xsl:choose><xsl:when test="$sMathmlType='munder' or           $sMathmlType='mover' or           $sMathmlType='munderover'"><xsl:text>undOvr</xsl:text></xsl:when><xsl:when test="$sMathmlType='msub' or                      $sMathmlType='msup' or                      $sMathmlType='msubsup'"><xsl:text>subSup</xsl:text></xsl:when></xsl:choose></xsl:attribute></m:limLoc><m:grow><xsl:attribute name="m:val"><xsl:value-of select="'on'"/></xsl:attribute></m:grow><m:subHide><xsl:attribute name="m:val"><xsl:choose><xsl:when test="$sMathmlType='mover' or                       $sMathmlType='msup'"><xsl:text>on</xsl:text></xsl:when><xsl:otherwise><xsl:text>off</xsl:text></xsl:otherwise></xsl:choose></xsl:attribute></m:subHide><m:supHide><xsl:attribute name="m:val"><xsl:choose><xsl:when test="$sMathmlType='munder' or                       $sMathmlType='msub'"><xsl:text>on</xsl:text></xsl:when><xsl:otherwise><xsl:text>off</xsl:text></xsl:otherwise></xsl:choose></xsl:attribute></m:supHide></m:naryPr></xsl:template><xsl:template name="mathrRpHook"/></xsl:stylesheet>